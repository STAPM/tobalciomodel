total.hhold.income <- 801796 + 504498
flow.table2 <- rbind(flowtable,hhold.output)        # add employment earnings as an extra row
flow.table2 <- cbind(flow.table2,c(hhold.demand,0))  # add household spending as an extra column (0 for no inter-household purchases)
## Calculate coefficient matrix:
A2 <- flow.table2 %*% (( c(total.output,total.hhold.income) )^-1 * diag(length( c(total.output,total.hhold.income)  ) ) )
A2 <- round(A2,5)
View(A2)
View(A)
IminusA2 <- diag(length(c(total.output,sum(total.output)))) - A2
View(IminusA2)
L2 <- solve(IminusA2)
View(L2)
L2 <- round(L2,5)
View(L)
L <- round(L,5)
View(L)
106/3
106/8
106/12
106/14
106/16
106/18
output.multipliers.type1 <- rep(NA,106)
output.multipliers.type2 <- rep(NA,106)
for (i in 1:106) {
output.multipliers.type1[i] <- sum(L[,i])
output.multipliers.type2[i] <- sum(L2[,i])
}
output.multipliers.type1
View(L2)
View(IminusA2)
## extract flow table and output/demand vectors
flowtable <- as.matrix(tobalciomodel::iotable[,grep("^[sec]", names(tobalciomodel::iotable), value=TRUE)])
total.output <- as.vector(as.matrix(tobalciomodel::iotable[,"total.output"]))
hhold.demand <- as.vector(as.matrix(tobalciomodel::iotable[,"hhold.demand"]))
hhold.output <- as.vector(as.matrix(tobalciomodel::iotable[,"hhold.output"]))
### Create the type 1 matrix
## Calculate coefficient matrix:
A <- flowtable %*% ((total.output )^-1 * diag(length(total.output)))
A <- round(A,5)
# Show A
# Identity matrix minus A
IminusA <- diag(length(total.output)) - A
# Calculate the Leontief Inverse matrix
L <- solve(IminusA)
L <- round(L,5)
## Create the type 2 matrix - endoegenous households
# create a new flowtable - add the employee output/compensation as an extra row and household demand as an extra columns
# the household-household transfer on the lead diagonal should be zero (households do not supply/demand from/to each other directly)
# in calculating A, the household consumption column is a fraction of total household
# income - total employee compensation across all sectors
total.hhold.income <- 801796
flow.table2 <- rbind(flowtable,hhold.output)        # add employment earnings as an extra row
flow.table2 <- cbind(flow.table2,c(hhold.demand,0))  # add household spending as an extra column (0 for no inter-household purchases)
## Calculate coefficient matrix:
A2 <- flow.table2 %*% (( c(total.output,total.hhold.income) )^-1 * diag(length( c(total.output,total.hhold.income)  ) ) )
A2 <- round(A2,5)
# Identity matrix minus A
IminusA2 <- diag(length(c(total.output,sum(total.output)))) - A2
# Calculate the Leontief Inverse matrix
L2 <- solve(IminusA2)
L2 <- round(L2,5)
720306+80917
1.33/0.4
flowtable <- as.matrix(tobalciomodel::iotable[,grep("^[sec]", names(tobalciomodel::iotable), value=TRUE)])
total.output <- as.vector(as.matrix(tobalciomodel::iotable[,"total.output"]))
hhold.demand <- as.vector(as.matrix(tobalciomodel::iotable[,"hhold.demand"]))
hhold.output <- as.vector(as.matrix(tobalciomodel::iotable[,"hhold.output"]))
hhold.demand
flow.table2 <- rbind(flowtable,hhold.output)        # add employment earnings as an extra row
flow.table2 <- cbind(flow.table2,c(hhold.demand,0))  # add household spending as an extra column (0 for no inter-household purchases)
View(flow.table2)
## Calculate coefficient matrix:
A2 <- flow.table2 %*% (( c(total.output,total.hhold.income) )^-1 * diag(length( c(total.output,total.hhold.income)  ) ) )
A2 <- round(A2,5)
# Identity matrix minus A
IminusA2 <- diag(length(c(total.output,sum(total.output)))) - A2
# Calculate the Leontief Inverse matrix
L2 <- solve(IminusA2)
L2 <- round(L2,5)
View(L2)
total.hhold.income <- 840117+80917
flow.table2 <- rbind(flowtable,hhold.output)        # add employment earnings as an extra row
flow.table2 <- cbind(flow.table2,c(hhold.demand,0))  # add household spending as an extra column (0 for no inter-household purchases)
## Calculate coefficient matrix:
A2 <- flow.table2 %*% (( c(total.output,total.hhold.income) )^-1 * diag(length( c(total.output,total.hhold.income)  ) ) )
A2 <- round(A2,5)
# Identity matrix minus A
IminusA2 <- diag(length(c(total.output,sum(total.output)))) - A2
# Calculate the Leontief Inverse matrix
L2 <- solve(IminusA2)
L2 <- round(L2,5)
View(L2)
View(A2)
output.multipliers.type1 <- rep(NA,106)
output.multipliers.type2 <- rep(NA,106)
for (i in 1:106) {
output.multipliers.type1[i] <- sum(L[,i])
output.multipliers.type2[i] <- sum(L2[,i])
}
output.multipliers.type2
output.multipliers.type1
library(tobalciomodel)
library(data.table)
library(dplyr)
### Select data and parameters
inputs <- final_demand_inputs(yr = 2018,
scotland = FALSE,
elasticity = "meng14")
### Simulate a policy
policy_sim <- simulate_alcohol_policy(data = inputs,
alc.policy = "exog",
on.trade.ch = rep(-0.1,5),
off.trade.ch = rep(0,5),
reallocate = FALSE,
prob = FALSE)
policy_sim_re <- simulate_alcohol_policy(data = inputs,
alc.policy = "exog",
on.trade.ch = rep(-0.1,5),
off.trade.ch = rep(0,5),
reallocate = TRUE,
prob = FALSE)
### Extract the multipliers
multipliers <- multipliers(yr = 2018,
empl = "fte")
### Output effects
output.effects.1 <- sum(policy_sim*multipliers[,"output.multipliers.type1"])
output.effects.2 <- sum(policy_sim*multipliers[,"output.multipliers.type2"])
### Select data and parameters
inputs <- final_demand_inputs(yr = 2010,
scotland = FALSE,
elasticity = "meng14")
### Simulate a policy
policy_sim <- simulate_alcohol_policy(data = inputs,
alc.policy = "exog",
on.trade.ch = rep(-0.1,5),
off.trade.ch = rep(0,5),
reallocate = FALSE,
prob = FALSE)
output.effects.1 <- sum(policy_sim*multipliers[,"output.multipliers.type1"])
output.effects.2 <- sum(policy_sim*multipliers[,"output.multipliers.type2"])
### Select data and parameters
inputs <- final_demand_inputs(yr = 2018,
scotland = FALSE,
elasticity = "meng14")
### Simulate a policy
policy_sim <- simulate_alcohol_policy(data = inputs,
alc.policy = "exog",
on.trade.ch = rep(-0.1,5),
off.trade.ch = rep(0,5),
reallocate = FALSE,
prob = FALSE)
policy_sim_re <- simulate_alcohol_policy(data = inputs,
alc.policy = "exog",
on.trade.ch = rep(-0.1,5),
off.trade.ch = rep(0,5),
reallocate = TRUE,
prob = FALSE)
## Extract the multipliers
multipliers <- multipliers(yr = 2018,
empl = "fte")
### Output effects
output.effects.1 <- sum(policy_sim*multipliers[,"output.multipliers.type1"])
output.effects.2 <- sum(policy_sim*multipliers[,"output.multipliers.type2"])
multipliers <- multipliers(yr = 2010,
empl = "fte")
### Output effects
output.effects.1 <- sum(policy_sim*multipliers[,"output.multipliers.type1"])
output.effects.2 <- sum(policy_sim*multipliers[,"output.multipliers.type2"])
### Extract the multipliers
multipliers <- multipliers(yr = 2018,
empl = "fte")
### Output effects
output.effects.1 <- sum(policy_sim*multipliers[,"output.multipliers.type1"])
output.effects.2 <- sum(policy_sim*multipliers[,"output.multipliers.type2"])
output.effects.1 <- round(sum(policy_sim*multipliers[,"output.multipliers.type1"]),3)
output.effects.2 <- round(sum(policy_sim*multipliers[,"output.multipliers.type2"]),3)
library(tobalciomodel)
library(tobalciomodel)
library(data.table)
library(dplyr)
### Select data and parameters
inputs <- final_demand_inputs(yr = 2018,
scotland = FALSE,
elasticity = "meng14")
### Simulate a policy
policy_sim <- simulate_alcohol_policy(data = inputs,
alc.policy = "exog",
on.trade.ch = rep(-0.1,5),
off.trade.ch = rep(0,5),
reallocate = FALSE,
prob = FALSE)
policy_sim_re <- simulate_alcohol_policy(data = inputs,
alc.policy = "exog",
on.trade.ch = rep(-0.1,5),
off.trade.ch = rep(0,5),
reallocate = TRUE,
prob = FALSE)
### Extract the multipliers
multipliers <- multipliers(yr = 2018,
empl = "fte")
### Output effects
output.effects.1 <- round(sum(policy_sim*multipliers[,"output.multipliers.type1"]),3)
output.effects.2 <- round(sum(policy_sim*multipliers[,"output.multipliers.type2"]),3)
output.effects.1 <- round(sum(policy_sim_re*multipliers[,"output.multipliers.type1"]),3)
output.effects.2 <- round(sum(policy_sim_re*multipliers[,"output.multipliers.type2"]),3)
library(tobalciomodel)
library(tobalciomodel)
library(data.table)
library(dplyr)
### Select data and parameters
inputs <- final_demand_inputs(yr = 2018,
scotland = FALSE,
elasticity = "meng14")
### Simulate a policy
policy_sim <- simulate_alcohol_policy(data = inputs,
alc.policy = "exog",
on.trade.ch = rep(-0.1,5),
off.trade.ch = rep(0,5),
reallocate = FALSE,
prob = FALSE)
policy_sim_re <- simulate_alcohol_policy(data = inputs,
alc.policy = "exog",
on.trade.ch = rep(-0.1,5),
off.trade.ch = rep(0,5),
reallocate = TRUE,
prob = FALSE)
### Extract the multipliers
multipliers <- multipliers(yr = 2018,
empl = "fte")
### Output effects
output.effects.1 <- round(sum(policy_sim*multipliers[,"output.multipliers.type1"]),3)
output.effects.2 <- round(sum(policy_sim*multipliers[,"output.multipliers.type2"]),3)
output.effects.1 <- round(sum(policy_sim_re*multipliers[,"output.multipliers.type1"]),3)
output.effects.2 <- round(sum(policy_sim_re*multipliers[,"output.multipliers.type2"]),3)
output.effects.1 <- round(sum(policy_sim*multipliers[,"output.multipliers.type1"]),3)
output.effects.2 <- round(sum(policy_sim*multipliers[,"output.multipliers.type2"]),3)
library(tobalciomodel)
library(data.table)
library(dplyr)
### Select data and parameters
inputs <- final_demand_inputs(yr = 2018,
scotland = FALSE,
elasticity = "meng14")
### Simulate a policy
policy_sim <- simulate_alcohol_policy(data = inputs,
alc.policy = "exog",
on.trade.ch = rep(-0.1,5),
off.trade.ch = rep(0,5),
reallocate = FALSE,
prob = FALSE)
policy_sim
tobalciomodel::iotable
flow <- tobalciomodel::iotable
names(flow)
distribution <- hhold.demand / sum(840117,80917)
distribution <- tobalciomodel::iotable$hhold.demand / sum(840117,80917)
distribution
distribution <- round(tobalciomodel::iotable$hhold.demand / sum(840117,80917),5)
sum(policy_sim)
data <- policy_sim
redistribute <- sum(data)
redistribute <- round(sum(data),3)
distribution <- round(tobalciomodel::iotable$hhold.demand / sum(840117,80917),5)
# obtain total spending to be re-distributed
redistribute <- round(sum(data),3)
reallocated <- redistribute*distribution
redistribute <- round(sum(data),3)*-1
reallocated <- redistribute*distribution
tobalciomodel::iotable[,1]
print(tobalciomodel::iotable[,1])
devtools::document()
sectors()
sectors <- c(1,2,3)
prop <- c(0.1,0.5,0.2,0.3)
length(prop)
if(length(sectors) != length(prop)) stop('sectors and prop vectors must be equal length')
prop <- rep(0.3,3)
if(length(sectors) != length(prop)) stop('sectors and prop vectors must be equal length')
for (i in sectors) {
print(i)
}
prop <- c(0.2,0.5,0.3)
for (i in sectors) {
reallocated[i] <- redistribute*prop[i]
}
reallocated
reallocated <- rep(NA,106)
for (i in sectors) {
reallocated[i] <- redistribute*prop[i]
}
summary(reallocated)
sum(reallocated)
?summ
?sum
sum(reallocated,na.rm = TRUE)
print(paste0("Proportion Reallocated: ",redistribute/sum(reallocated,na.rm = TRUE)))
distribution <- round(tobalciomodel::iotable$hhold.demand / sum(840117,80917),5)
# obtain total spending to be re-distributed
reallocated <- redistribute*distribution
print(paste0("Proportion Reallocated: ",redistribute/sum(reallocated,na.rm = TRUE)))
redistribute <- round(sum(data),3)*-1
distribution <- round(tobalciomodel::iotable$hhold.demand / sum(840117,80917),5)
reallocated <- redistribute*distribution
reallocated <- redistribute*distribution
reallocated <- redistribute*distribution
reallocated <- redistribute*distribution
print(paste0("Proportion Reallocated: ",redistribute/sum(reallocated,na.rm = TRUE)))
sum(distribution)
sum(reallocated)
sum(redistribute)
print(paste0("Proportion Reallocated: ",sum(reallocated,na.rm = TRUE)/redistribute))
print(paste0("Proportion of Expenditure Reallocated to Domestic Consumption: ",sum(reallocated,na.rm = TRUE)/redistribute))
## produce an error and cancel if the sectors and prop vectors are not of equal length
if(length(sectors) != length(prop)) stop('sectors and prop vectors must be equal length')
# empty vector of reallocations to fill in
reallocated <- rep(NA,106)
# loop over each chosen reallocation sector
for (i in sectors) {
reallocated[i] <- redistribute*prop[i]
}
print(paste0("Proportion of Expenditure Reallocated to Domestic Consumption: ",sum(reallocated,na.rm = TRUE)/redistribute))
library(tobalciomodel)
sectors()
rm(list = ls())
usethis::use_vignette(ontrade,title = "Sensitivity to Distribution Across On-Trade Sectors")
usethis::use_vignette("ontrade",title = "Sensitivity to Distribution Across On-Trade Sectors")
library(tidyverse)
library(data.table)
### Select data and parameters
inputs <- final_demand_inputs(yr = 2018,
scotland = FALSE,
elasticity = "meng14")
### Extract the multipliers
multipliers <- multipliers(yr = 2018,
empl = "fte")
### Simulate the policy for randomly drawn proportions
reps <- 2000
effects.vector <- rep(NA,reps)
for (i in 1:reps) {
print(paste0("Simulation Iteration: ",i))
policy_sim <- simulate_alcohol_policy(data = inputs,
alc.policy = "exog",
on.trade.ch = rep(-0.1,5),
off.trade.ch = c(0,0,0,0,0),
reallocate = FALSE,
prob = TRUE)
effects.vector[i] <- sum(policy_sim*multipliers[,"output.multipliers.type1"])
}
data <- data.frame(effects.vector)
devtools::load_all(".")
library(tobalciomodel)
library(tobalciomodel)
library(data.table)
library(dplyr)
### Select data and parameters
inputs <- final_demand_inputs(yr = 2018,
scotland = FALSE,
elasticity = "meng14")
### Simulate a policy
policy_sim <- simulate_alcohol_policy(data = inputs,
alc.policy = "exog",
on.trade.ch = rep(-0.1,5),
off.trade.ch = rep(0,5),
reallocate = FALSE,
prob = FALSE)
policy_sim_re <- simulate_alcohol_policy(data = inputs,
alc.policy = "exog",
on.trade.ch = rep(-0.1,5),
off.trade.ch = rep(0,5),
reallocate = TRUE,
prob = FALSE)
### Extract the multipliers
multipliers <- multipliers(yr = 2018,
empl = "fte")
library(tobalciomodel)
library(data.table)
library(dplyr)
### Select data and parameters
inputs <- final_demand_inputs(yr = 2018,
scotland = FALSE,
elasticity = "meng14")
### Simulate a policy
policy_sim <- simulate_alcohol_policy(data = inputs,
alc.policy = "exog",
on.trade.ch = rep(-0.1,5),
off.trade.ch = rep(0,5),
prob = FALSE)
policy_sim_re <- simulate_alcohol_policy(data = inputs,
alc.policy = "exog",
on.trade.ch = rep(-0.1,5),
off.trade.ch = rep(0,5),
prob = FALSE)
### Extract the multipliers
multipliers <- multipliers(yr = 2018,
empl = "fte")
policy_sim$final.demand
output.effects.1 <- round(sum(policy_sim$final.demand*multipliers[,"output.multipliers.type1"]),3)
output.effects.2 <- round(sum(policy_sim$final.demand*multipliers[,"output.multipliers.type2"]),3)
empl.effects.1 <- round(sum(policy_sim$final.demand*multipliers[,"emp.multipliers.type1"]))
empl.effects.2 <- round(sum(policy_sim$final.demand*multipliers[,"emp.multipliers.type2"]))
gva.effects.1 <- sum(policy_sim$final.demand*multipliers[,"gva.multipliers.type1"])
gva.effects.2 <- sum(policy_sim$final.demand*multipliers[,"gva.multipliers.type2"])
gva.effects.1 <- round(sum(policy_sim$final.demand*multipliers[,"gva.multipliers.type1"]),3)
gva.effects.2 <- round(sum(policy_sim$final.demand*multipliers[,"gva.multipliers.type2"]),3)
demand.change <- policy_sim
output.effects.1 <- round(sum(demand.change$final.demand*multipliers[,"output.multipliers.type1"]),3)
output.effects.2 <- round(sum(demand.change$final.demand*multipliers[,"output.multipliers.type2"]),3)
empl.effects.1 <- round(sum(demand.change$final.demand*multipliers[,"emp.multipliers.type1"]))
empl.effects.2 <- round(sum(demand.change$final.demand*multipliers[,"emp.multipliers.type2"]))
gva.effects.1 <- round(sum(demand.change$final.demand*multipliers[,"gva.multipliers.type1"]),3)
gva.effects.2 <- round(sum(demand.change$final.demand*multipliers[,"gva.multipliers.type2"]),3)
output <- matrix(c(output.effects.1,output.effects.2,
empl.effects.1,empl.effects.2,
gva.effects.1,gva.effects.1),
byrow=FALSE,
ncol = 3)
output
output <- matrix(c(output.effects.1,output.effects.2,
gva.effects.1,gva.effects.2,
empl.effects.1,empl.effects.2),
byrow=FALSE,
ncol = 3,
dimnames = list(c("Type 1","Type 2"),
c("Output","GVA","Employment")))
output
library(tobalciomodel)
View(multipliers)
library(tobalciomodel)
output <- impact_calculate(demand.change = policy_sim,
multipliers = multipliers)
devtools::load_all(".")
library(tobalciomodel)
devtools::document()
devtools::load_all(".")
library(tobalciomodel)
output <- impact_calculate(demand.change = policy_sim,
multipliers = multipliers)
output
path = "U:/Cm1djm/ManWin/My Documents/Project 1 - Input-Output Modelling/Modelling - tobalciomodel/output/"
write.csv(output,paste0(path,"example.csv"))
write.csv(output,paste0(path,"example.csv"))
devtools::load_all(".")
library(tobalciomodel)
output <- impact_calculate(demand.change = policy_sim,
multipliers = multipliers)
output.effects.1 <- round(sum(demand.change$final.demand*multipliers[,"output.multipliers.type1"]),3)
output.effects.2 <- round(sum(demand.change$final.demand*multipliers[,"output.multipliers.type2"]),3)
empl.effects.1 <- round(sum(demand.change$final.demand*multipliers[,"emp.multipliers.type1"])/3)
empl.effects.2 <- round(sum(demand.change$final.demand*multipliers[,"emp.multipliers.type2"])/3)
gva.effects.1 <- round(sum(demand.change$final.demand*multipliers[,"gva.multipliers.type1"]),3)
gva.effects.2 <- round(sum(demand.change$final.demand*multipliers[,"gva.multipliers.type2"]),3)
output.effects.1 <- round(sum(demand.change$final.demand*multipliers[,"output.multipliers.type1"]),3)
output.effects.2 <- round(sum(demand.change$final.demand*multipliers[,"output.multipliers.type2"]),3)
empl.effects.1 <- round(sum(demand.change$final.demand*multipliers[,"emp.multipliers.type1"])/1000)
empl.effects.2 <- round(sum(demand.change$final.demand*multipliers[,"emp.multipliers.type2"])/1000)
gva.effects.1 <- round(sum(demand.change$final.demand*multipliers[,"gva.multipliers.type1"]),3)
gva.effects.2 <- round(sum(demand.change$final.demand*multipliers[,"gva.multipliers.type2"]),3)
# combine into a matrix - Type I and II effects for output, GVA, and employment
output <- matrix(c(output.effects.1,output.effects.2,
gva.effects.1,gva.effects.2,
empl.effects.1,empl.effects.2),
byrow=FALSE,
ncol = 3,
dimnames = list(c("Type 1","Type 2"),
c("Output (£bn)","GVA (£bn)","Employment (000s)")))
write.csv(output,paste0(path,"example.csv"))
output
devtools:;document()
devtools::document()
devtools::load_all(".")
library(tobalciomodel)
library(data.table)
library(dplyr)
### Select data and parameters
inputs <- final_demand_inputs(yr = 2018,
scotland = FALSE,
elasticity = "meng14")
### Simulate an alcohol policy
policy_sim <- simulate_alcohol_policy(data = inputs,
alc.policy = "exog",
on.trade.ch = rep(-0.1,5),
off.trade.ch = rep(0,5),
prob = FALSE)
### Extract the multipliers
multipliers <- multipliers(yr = 2018,
empl = "fte")
### Output effects
output <- impact_calculate(demand.change = policy_sim,
multipliers = multipliers)
devtools::load_all(".")
library(tobalciomodel)
library(data.table)
library(dplyr)
### Select data and parameters
inputs <- final_demand_inputs(yr = 2018,
scotland = FALSE,
elasticity = "meng14")
### Simulate an alcohol policy
policy_sim <- simulate_alcohol_policy(data = inputs,
alc.policy = "exog",
on.trade.ch = rep(-0.1,5),
off.trade.ch = rep(0,5),
prob = FALSE)
### Extract the multipliers
multipliers <- multipliers(yr = 2018,
empl = "fte")
### Output effects
output <- impact_calculate(demand.change = policy_sim,
multipliers = multipliers)
output
help(package=tobalciomodel)
