units = sum(units),
price_per_unit = weighted.mean(price_per_unit,w=units,na.rm=TRUE)),
by = c("year","product")]
rm(mesas, mesas_c, mesas_p, mesas_pop)
############################
######## OFF-TRADE #########
## get the data on off-trade prices per unit and total units of consumption
## prices
## prices
mesas_p  <- readxl::read_excel(paste0("data-raw/",file,".xlsx"),
sheet = sheet_s,
range = r_pr_off)
setDT(mesas_p)
mesas_p  <- mesas_p[, c(1,24:28)]
setnames(mesas_p, names(mesas_p), c("product","2016","2017","2018","2019","2020"))
mesas_p  <- mesas_p[product %in% c("Beer","Cider","Perry","Wine","Fortified Wines","Spirits","RTDs"), ]
mesas_p <- melt(mesas_p, id.vars = "product",  variable.name = "year", value.name = "price_per_unit")
mesas_p[, year := as.numeric(year) + 2015]
mesas_p[, price_per_unit := as.numeric(price_per_unit)]
## consumption
mesas_c <- readxl::read_excel(paste0("data-raw/",file,".xlsx"),
sheet = sheet_s,
range = r_con_off)
setDT(mesas_c)
mesas_c  <- mesas_c[, c(1,24:28)]
setnames(mesas_c, names(mesas_c), c("product","2016","2017","2018","2019","2020"))
mesas_c  <- mesas_c[product %in% c("Beer","Cider","Perry","Wine","Fortified Wines","Spirits","RTDs"), ]
mesas_c <- melt(mesas_c, id.vars = "product",  variable.name = "year", value.name = "units_per_adult")
mesas_c[, year := as.numeric(year) + 2015]
mesas_c[, units_per_adult := round(as.numeric(units_per_adult),3)]
## merge in population data and calculate total consumption. merge the price and consumption data together.
## Collapse to the four-product level, taking weighted mean of price and summing up total consumption
## population data
mesas_pop <- merge(mesas_c, pop_data, by = "year", all = TRUE)
mesas_pop[, units := units_per_adult*population]
mesas_pop <- mesas_pop[, population := NULL]
mesas <- merge(mesas_p, mesas_pop, by = c("product","year"), all = TRUE, sort = FALSE)
## recode products
mesas$product <- plyr::mapvalues(mesas$product,
from = c("Beer","Cider","Perry","Wine","Fortified Wines","Spirits","RTDs"),
to = c("off_beer","off_cider","off_cider","off_wine","off_wine","off_spirits","off_spirits"))
## collapse to 4-product level
data_off <- mesas[, .(units_per_adult = sum(units_per_adult),
units = sum(units),
price_per_unit = weighted.mean(price_per_unit,w=units,na.rm=TRUE)),
by = c("year","product")]
rm(mesas, mesas_c, mesas_p, mesas_pop)
#######################################
## COMBINE ON AND OFF TRADE DATASETS ##
scot_data <- rbindlist(list(data_off, data_on))
scot_data[, country := "Scotland"]
rm(pop_data, data_off, data_on)
##############################################################################
################## COMBINE ENGLAND/WALES AND SCOTLAND DATA ###################
data <-rbindlist(list(engw_data, scot_data))
rm(engw_data, scot_data)
## collapse to 4-product/year level
alcohol_data <- data[, .(units_per_adult = sum(units_per_adult),
units = sum(units),
price_per_unit = weighted.mean(price_per_unit,w=units,na.rm=TRUE)),
by = c("year","product")]
rm(data)
## calculate the total units across on/off trade by each product and calculate the percentage
## split between on/off trade to divide the clearances data
alcohol_data[product %in% c("off_spirits","on_spirits"), prod := "spirits"]
alcohol_data[product %in% c("off_beer","on_beer"), prod := "beer"]
alcohol_data[product %in% c("off_wine","on_wine"), prod := "wine"]
alcohol_data[product %in% c("off_cider","on_cider"), prod := "cider"]
alcohol_data[, total_units := sum(units), by = c("year","prod")]
alcohol_data[, proportion := units/total_units]
##########################################################################
############ READ IN CLEARANCES AND TOTAL DUTIES DATA  ###################
## read in duties for calendar years 2016-2020
spirits  <- readxl::read_excel(paste0("data-raw/","2021_Alcohol_Tables_Spirits",".xlsx"))
beer     <- readxl::read_excel(paste0("data-raw/","2021_Alcohol_Tables_Beer",".xlsx"))
cider    <- readxl::read_excel(paste0("data-raw/","2021_Alcohol_Tables_Cider",".xlsx"))
wine     <- readxl::read_excel(paste0("data-raw/","2021_Alcohol_Tables_Wine",".xlsx"))
## spirits
setDT(spirits)
spirits <- spirits[,c(1,9)]
setnames(spirits, names(spirits), c("year","total_duty"))
spirits <- spirits[year %in% 2016:2020,]
spirits[, prod := "spirits"]
## beer
setDT(beer)
beer <- beer[,c(1,9)]
setnames(beer, names(beer), c("year","total_duty"))
beer <- beer[year %in% 2016:2020,]
beer[, prod := "beer"]
## cider
setDT(cider)
cider <- cider[,c(1,3)]
setnames(cider, names(cider), c("year","total_duty"))
cider <- cider[year %in% 2016:2020,]
cider[, prod := "cider"]
## wine
setDT(wine)
wine <- wine[,c(1,9)]
setnames(wine, names(wine), c("year","total_duty"))
wine <- wine[year %in% 2016:2020,]
wine[, prod := "wine"]
#########################
## COMBINE DUTIES DATA ##
duties <- rbindlist(list(beer, cider, wine, spirits))
rm(beer,cider,wine,spirits)
#################################################################
###### MERGE DUTIES DATA TO MESAS DATA ##########################
data <- merge(alcohol_data, duties, by = c("year","prod"))
rm(alcohol_data)
data[, duty := total_duty*proportion]
data[, total_exp := (price_per_unit * units)/1000000]
data[, vat := total_exp*(0.2/1.2)]
data[, c("total_duty","total_units") := NULL]
data[, total_tax := vat + duty]
data[, exp_bp := total_exp - total_tax]
data[, basic_price_per_unit := (exp_bp*1000000)/units]
setnames(data, c("total_exp","total_tax"), c("exp_mp","tax"))
alcohol_data <- data[, c("year","product","units_per_adult","units","price_per_unit","basic_price_per_unit",
"exp_mp","exp_bp","duty","vat","tax")]
View(alcohol_data)
### The purpose of this code is to construct aggregate price and consumption data for
### alcohol products to use in aggregate analyses. It uses the data files:
# 1) mesas-monitoring-report-2021-alcohol-sales.xlsx    - MESAS (from line 16)
# 2) 2021_Jul_Alc_Tabs.xlsx                             - Alcohol bulletin (from line 390)
library(data.table)
library(readxl)
library(plyr)
rm(list = ls())
prod_list <- c("off_beer","off_cider","off_wine","off_spirits","off_rtds",
"on_beer","on_cider","on_wine","on_spirits","on_rtds")
##################################
############# MESAS INPUTS
file          <- "mesas-monitoring-report-2021-alcohol-sales"
sheet_s       <- "Scotland data"
sheet_ew      <- "England & Wales data"
r_pop_scot    <- "C23:C27"
r_pop_engw    <- "D23:D27"
r_pr_on       <- "B43:AC52"
r_pr_off      <- "AE43:BF52"
r_con_on      <- "B30:AC39"
r_con_off     <- "AE30:BF39"
#################################################
######### ENG/WALES DATA ########################
#####################
### POPULATION ######
popsize   <- readxl::read_excel(paste0("data-raw/",file,".xlsx"),
sheet = "Population data",
range = r_pop_engw,
col_names = FALSE)
setDT(popsize)
year <- 2016:2020
setnames(popsize, names(popsize), "population")
pop_data <- data.table(year,popsize)
rm(year, popsize)
###########################
######## ON-TRADE #########
## get the data on on-trade prices per unit and total units of consumption
## prices
mesas_p  <- readxl::read_excel(paste0("data-raw/",file,".xlsx"),
sheet = sheet_ew,
range = r_pr_on)
setDT(mesas_p)
mesas_p  <- mesas_p[, c(1,24:28)]
setnames(mesas_p, names(mesas_p), c("product","2016","2017","2018","2019","2020"))
mesas_p  <- mesas_p[product %in% c("Beer","Cider","Perry","Wine","Fortified Wines","Spirits","RTDs"), ]
mesas_p <- melt(mesas_p, id.vars = "product",  variable.name = "year", value.name = "price_per_unit")
mesas_p[, year := as.numeric(year) + 2015]
mesas_p[, price_per_unit := as.numeric(price_per_unit)]
## consumption
mesas_c <- readxl::read_excel(paste0("data-raw/",file,".xlsx"),
sheet = sheet_ew,
range = r_con_on)
setDT(mesas_c)
mesas_c  <- mesas_c[, c(1,24:28)]
setnames(mesas_c, names(mesas_c), c("product","2016","2017","2018","2019","2020"))
mesas_c  <- mesas_c[product %in% c("Beer","Cider","Perry","Wine","Fortified Wines","Spirits","RTDs"), ]
mesas_c <- melt(mesas_c, id.vars = "product",  variable.name = "year", value.name = "units_per_adult")
mesas_c[, year := as.numeric(year) + 2015]
mesas_c[, units_per_adult := round(as.numeric(units_per_adult),3)]
## merge in population data and calculate total consumption. merge the price and consumption data together.
## Collapse to the four-product level, taking weighted mean of price and summing up total consumption
## population data
mesas_pop <- merge(mesas_c, pop_data, by = "year", all = TRUE)
mesas_pop[, units := units_per_adult*population]
mesas_pop <- mesas_pop[, population := NULL]
mesas <- merge(mesas_p, mesas_pop, by = c("product","year"), all = TRUE, sort = FALSE)
## recode products
mesas$product <- plyr::mapvalues(mesas$product,
from = c("Beer","Cider","Perry","Wine","Fortified Wines","Spirits","RTDs"),
to = c("on_beer","on_cider","on_cider","on_wine","on_wine","on_spirits","on_spirits"))
## collapse to 4-product level
data_on <- mesas[, .(units_per_adult = sum(units_per_adult),
units = sum(units),
price_per_unit = weighted.mean(price_per_unit,w=units,na.rm=TRUE)),
by = c("year","product")]
rm(mesas, mesas_c, mesas_p, mesas_pop)
############################
######## OFF-TRADE #########
## get the data on off-trade prices per unit and total units of consumption
## prices
## prices
mesas_p  <- readxl::read_excel(paste0("data-raw/",file,".xlsx"),
sheet = sheet_ew,
range = r_pr_off)
setDT(mesas_p)
mesas_p  <- mesas_p[, c(1,24:28)]
setnames(mesas_p, names(mesas_p), c("product","2016","2017","2018","2019","2020"))
mesas_p  <- mesas_p[product %in% c("Beer","Cider","Perry","Wine","Fortified Wines","Spirits","RTDs"), ]
mesas_p <- melt(mesas_p, id.vars = "product",  variable.name = "year", value.name = "price_per_unit")
mesas_p[, year := as.numeric(year) + 2015]
mesas_p[, price_per_unit := as.numeric(price_per_unit)]
## consumption
mesas_c <- readxl::read_excel(paste0("data-raw/",file,".xlsx"),
sheet = sheet_ew,
range = r_con_off)
setDT(mesas_c)
mesas_c  <- mesas_c[, c(1,24:28)]
setnames(mesas_c, names(mesas_c), c("product","2016","2017","2018","2019","2020"))
mesas_c  <- mesas_c[product %in% c("Beer","Cider","Perry","Wine","Fortified Wines","Spirits","RTDs"), ]
mesas_c <- melt(mesas_c, id.vars = "product",  variable.name = "year", value.name = "units_per_adult")
mesas_c[, year := as.numeric(year) + 2015]
mesas_c[, units_per_adult := round(as.numeric(units_per_adult),3)]
## merge in population data and calculate total consumption. merge the price and consumption data together.
## Collapse to the four-product level, taking weighted mean of price and summing up total consumption
## population data
mesas_pop <- merge(mesas_c, pop_data, by = "year", all = TRUE)
mesas_pop[, units := units_per_adult*population]
mesas_pop <- mesas_pop[, population := NULL]
mesas <- merge(mesas_p, mesas_pop, by = c("product","year"), all = TRUE, sort = FALSE)
## recode products
mesas$product <- plyr::mapvalues(mesas$product,
from = c("Beer","Cider","Perry","Wine","Fortified Wines","Spirits","RTDs"),
to = c("off_beer","off_cider","off_cider","off_wine","off_wine","off_spirits","off_spirits"))
## collapse to 4-product level
data_off <- mesas[, .(units_per_adult = sum(units_per_adult),
units = sum(units),
price_per_unit = weighted.mean(price_per_unit,w=units,na.rm=TRUE)),
by = c("year","product")]
rm(mesas, mesas_c, mesas_p, mesas_pop)
#######################################
## COMBINE ON AND OFF TRADE DATASETS ##
engw_data <- rbindlist(list(data_off, data_on))
engw_data[, country := "England & Wales"]
rm(pop_data, data_off, data_on)
#################################################
######### SCOTTISH DATA #########################
#####################
### POPULATION ######
popsize   <- readxl::read_excel(paste0("data-raw/",file,".xlsx"),
sheet = "Population data",
range = r_pop_scot,
col_names = FALSE)
setDT(popsize)
year <- 2016:2020
setnames(popsize, names(popsize), "population")
pop_data <- data.table(year,popsize)
rm(year, popsize)
###########################
######## ON-TRADE #########
## get the data on on-trade prices per unit and total units of consumption
## prices
mesas_p  <- readxl::read_excel(paste0("data-raw/",file,".xlsx"),
sheet = sheet_s,
range = r_pr_on)
setDT(mesas_p)
mesas_p  <- mesas_p[, c(1,24:28)]
setnames(mesas_p, names(mesas_p), c("product","2016","2017","2018","2019","2020"))
mesas_p  <- mesas_p[product %in% c("Beer","Cider","Perry","Wine","Fortified Wines","Spirits","RTDs"), ]
mesas_p <- melt(mesas_p, id.vars = "product",  variable.name = "year", value.name = "price_per_unit")
mesas_p[, year := as.numeric(year) + 2015]
mesas_p[, price_per_unit := as.numeric(price_per_unit)]
## consumption
mesas_c <- readxl::read_excel(paste0("data-raw/",file,".xlsx"),
sheet = sheet_s,
range = r_con_on)
setDT(mesas_c)
mesas_c  <- mesas_c[, c(1,24:28)]
setnames(mesas_c, names(mesas_c), c("product","2016","2017","2018","2019","2020"))
mesas_c  <- mesas_c[product %in% c("Beer","Cider","Perry","Wine","Fortified Wines","Spirits","RTDs"), ]
mesas_c <- melt(mesas_c, id.vars = "product",  variable.name = "year", value.name = "units_per_adult")
mesas_c[, year := as.numeric(year) + 2015]
mesas_c[, units_per_adult := round(as.numeric(units_per_adult),3)]
## merge in population data and calculate total consumption. merge the price and consumption data together.
## Collapse to the four-product level, taking weighted mean of price and summing up total consumption
## population data
mesas_pop <- merge(mesas_c, pop_data, by = "year", all = TRUE)
mesas_pop[, units := units_per_adult*population]
mesas_pop <- mesas_pop[, population := NULL]
mesas <- merge(mesas_p, mesas_pop, by = c("product","year"), all = TRUE, sort = FALSE)
## recode products
mesas$product <- plyr::mapvalues(mesas$product,
from = c("Beer","Cider","Perry","Wine","Fortified Wines","Spirits","RTDs"),
to = c("on_beer","on_cider","on_cider","on_wine","on_wine","on_spirits","on_spirits"))
## collapse to 4-product level
data_on <- mesas[, .(units_per_adult = sum(units_per_adult),
units = sum(units),
price_per_unit = weighted.mean(price_per_unit,w=units,na.rm=TRUE)),
by = c("year","product")]
rm(mesas, mesas_c, mesas_p, mesas_pop)
############################
######## OFF-TRADE #########
## get the data on off-trade prices per unit and total units of consumption
## prices
## prices
mesas_p  <- readxl::read_excel(paste0("data-raw/",file,".xlsx"),
sheet = sheet_s,
range = r_pr_off)
setDT(mesas_p)
mesas_p  <- mesas_p[, c(1,24:28)]
setnames(mesas_p, names(mesas_p), c("product","2016","2017","2018","2019","2020"))
mesas_p  <- mesas_p[product %in% c("Beer","Cider","Perry","Wine","Fortified Wines","Spirits","RTDs"), ]
mesas_p <- melt(mesas_p, id.vars = "product",  variable.name = "year", value.name = "price_per_unit")
mesas_p[, year := as.numeric(year) + 2015]
mesas_p[, price_per_unit := as.numeric(price_per_unit)]
## consumption
mesas_c <- readxl::read_excel(paste0("data-raw/",file,".xlsx"),
sheet = sheet_s,
range = r_con_off)
setDT(mesas_c)
mesas_c  <- mesas_c[, c(1,24:28)]
setnames(mesas_c, names(mesas_c), c("product","2016","2017","2018","2019","2020"))
mesas_c  <- mesas_c[product %in% c("Beer","Cider","Perry","Wine","Fortified Wines","Spirits","RTDs"), ]
mesas_c <- melt(mesas_c, id.vars = "product",  variable.name = "year", value.name = "units_per_adult")
mesas_c[, year := as.numeric(year) + 2015]
mesas_c[, units_per_adult := round(as.numeric(units_per_adult),3)]
## merge in population data and calculate total consumption. merge the price and consumption data together.
## Collapse to the four-product level, taking weighted mean of price and summing up total consumption
## population data
mesas_pop <- merge(mesas_c, pop_data, by = "year", all = TRUE)
mesas_pop[, units := units_per_adult*population]
mesas_pop <- mesas_pop[, population := NULL]
mesas <- merge(mesas_p, mesas_pop, by = c("product","year"), all = TRUE, sort = FALSE)
## recode products
mesas$product <- plyr::mapvalues(mesas$product,
from = c("Beer","Cider","Perry","Wine","Fortified Wines","Spirits","RTDs"),
to = c("off_beer","off_cider","off_cider","off_wine","off_wine","off_spirits","off_spirits"))
## collapse to 4-product level
data_off <- mesas[, .(units_per_adult = sum(units_per_adult),
units = sum(units),
price_per_unit = weighted.mean(price_per_unit,w=units,na.rm=TRUE)),
by = c("year","product")]
rm(mesas, mesas_c, mesas_p, mesas_pop)
#######################################
## COMBINE ON AND OFF TRADE DATASETS ##
scot_data <- rbindlist(list(data_off, data_on))
scot_data[, country := "Scotland"]
rm(pop_data, data_off, data_on)
##############################################################################
################## COMBINE ENGLAND/WALES AND SCOTLAND DATA ###################
data <-rbindlist(list(engw_data, scot_data))
rm(engw_data, scot_data)
## collapse to 4-product/year level. Upshift consumption to be reflective of the total UK
## population (assume NI distribution of alcohol consumption = GB to do so). NI population is 2.84%
## of GBs in each year of ONS population projections from 2018-2030
alcohol_data <- data[, .(units_per_adult = sum(units_per_adult)*1.0284,
units = sum(units)*1.0284,
price_per_unit = weighted.mean(price_per_unit,w=units,na.rm=TRUE)),
by = c("year","product")]
rm(data)
## calculate the total units across on/off trade by each product and calculate the percentage
## split between on/off trade to divide the clearances data
alcohol_data[product %in% c("off_spirits","on_spirits"), prod := "spirits"]
alcohol_data[product %in% c("off_beer","on_beer"), prod := "beer"]
alcohol_data[product %in% c("off_wine","on_wine"), prod := "wine"]
alcohol_data[product %in% c("off_cider","on_cider"), prod := "cider"]
alcohol_data[, total_units := sum(units), by = c("year","prod")]
alcohol_data[, proportion := units/total_units]
##########################################################################
############ READ IN CLEARANCES AND TOTAL DUTIES DATA  ###################
## read in duties for calendar years 2016-2020
spirits  <- readxl::read_excel(paste0("data-raw/","2021_Alcohol_Tables_Spirits",".xlsx"))
beer     <- readxl::read_excel(paste0("data-raw/","2021_Alcohol_Tables_Beer",".xlsx"))
cider    <- readxl::read_excel(paste0("data-raw/","2021_Alcohol_Tables_Cider",".xlsx"))
wine     <- readxl::read_excel(paste0("data-raw/","2021_Alcohol_Tables_Wine",".xlsx"))
## spirits
setDT(spirits)
spirits <- spirits[,c(1,9)]
setnames(spirits, names(spirits), c("year","total_duty"))
spirits <- spirits[year %in% 2016:2020,]
spirits[, prod := "spirits"]
## beer
setDT(beer)
beer <- beer[,c(1,9)]
setnames(beer, names(beer), c("year","total_duty"))
beer <- beer[year %in% 2016:2020,]
beer[, prod := "beer"]
## cider
setDT(cider)
cider <- cider[,c(1,3)]
setnames(cider, names(cider), c("year","total_duty"))
cider <- cider[year %in% 2016:2020,]
cider[, prod := "cider"]
## wine
setDT(wine)
wine <- wine[,c(1,9)]
setnames(wine, names(wine), c("year","total_duty"))
wine <- wine[year %in% 2016:2020,]
wine[, prod := "wine"]
#########################
## COMBINE DUTIES DATA ##
duties <- rbindlist(list(beer, cider, wine, spirits))
rm(beer,cider,wine,spirits)
#################################################################
###### MERGE DUTIES DATA TO MESAS DATA ##########################
data <- merge(alcohol_data, duties, by = c("year","prod"))
rm(alcohol_data)
data[, duty := total_duty*proportion]
data[, total_exp := (price_per_unit * units)/1000000]
data[, vat := total_exp*(0.2/1.2)]
data[, c("total_duty","total_units") := NULL]
data[, total_tax := vat + duty]
data[, exp_bp := total_exp - total_tax]
data[, basic_price_per_unit := (exp_bp*1000000)/units]
setnames(data, c("total_exp","total_tax"), c("exp_mp","tax"))
alcohol_data <- data[, c("year","product","units_per_adult","units","price_per_unit","basic_price_per_unit",
"exp_mp","exp_bp","duty","vat","tax")]
View(alcohol_data)
usethis::use_data(alcohol_data, overwrite = TRUE)
roxygen2::roxygenise()
library(tobalciomodel)
help(package = tobalciomodel)
library(tobalciomodel)
library(tobalciomodel)
library(tobalciomodel)
library(tobalciomodel)
library(tobalciomodel)
sum(c(-20,10,30))
expenditure = c(-20,10,30)
saving_rate = 0
vector = "hhfce_noalctob"
vectors_data = tobalciomodel::vectors_hhold
mapping = tobalciomodel::coicop_cpa_mapping
FAI = FALSE
exp <- -1*(1 - saving_rate)*sum(expenditure)
if (vector == "hhfce_all") {
v <- as.vector(as.matrix( vectors_data[,2] ))
} else if (vector == "hhfce_noalc") {
v <- as.vector(as.matrix( vectors_data[,3] ))
} else if (vector == "hhfce_notob") {
v <- as.vector(as.matrix( vectors_data[,4] ))
} else if (vector == "hhfce_noalctob") {
v <- as.vector(as.matrix( vectors_data[,5] ))
} else if (vector == "all_hotels") {
v <- as.vector(as.matrix( vectors_data[,6] ))
} else if (vector == "all_rec_durables") {
v <- as.vector(as.matrix( vectors_data[,7] ))
} else if (vector == "all_rec_services") {
v <- as.vector(as.matrix( vectors_data[,8] ))
} else if (vector == "all_clothing") {
v <- as.vector(as.matrix( vectors_data[,9] ))
} else if (vector == "all_furniture") {
v <- as.vector(as.matrix( vectors_data[,10] ))
} else if (vector == "all_appliances") {
v <- as.vector(as.matrix( vectors_data[,11] ))
} else if (vector == "all_vehicles") {
v <- as.vector(as.matrix( vectors_data[,12] ))
} else if (vector == "all_books") {
v <- as.vector(as.matrix( vectors_data[,13] ))
}
v
new_exp <- exp*v
sum(new_exp)
new_exp <- cbind(vectors_data[,1],new_exp)
View(new_exp)
merge <- merge.data.table(mapping,
new_exp,
by = "coicop")
library(data.table)
merge <- merge.data.table(mapping,
new_exp,
by = "coicop")
View(merge)
merge[, mapped_exp := new_exp*mapping]
View(merge)
sum(merge$mapped_exp)
sum(merge$new_exp)
merge[, total_exp := sum(mapped_exp), by = "CPA_code"]
final <- unique(merge[,c("CPA_code","Product","total_exp")])
View(final)
x <- merge(final, tobalciomodel::CPA,
by = "CPA_code", sort = FALSE, all = TRUE)
H53_I55 <- as.numeric(x[CPA_code == "CPA_H53&I55","total_exp"])
x[CPA_code == "CPA_H53", total_exp := H53_I55*841/(841+4722)]
x[CPA_code == "CPA_I55", total_exp := H53_I55*4722/(841+4722)]
C27_C28 <- as.numeric(x[CPA_code == "CPA_C27 & C28","total_exp"])
x[CPA_code == "CPA_C27", total_exp := C27_C28*(1348)/(1348+753)]
x[CPA_code == "CPA_C28", total_exp := C27_C28*(753)/(1348+753)]
setkey(x, CPA_code)
x <- x[!"CPA_C27 & C28"]
x <- x[!"CPA_H53&I55"]
x <- x[,c("CPA_code","Product.y","total_exp")]
setnames(x,c("Product.y","total_exp"),c("Product","hhold_exp"))
hhold_exp <- copy(x)
View(hhold_exp)
sum(expenditure)
hhold_exp[Product == "Alcoholic beverages  & Tobacco products", hhold_exp := hhold_exp + sum(expenditure)]
View(hhold_exp)
sum(hhold_exp$hhold_exp)
testthat::expect_true(sum(expenditure) == sum(hhold_exp$hhold_exp),
info = "Function: ReallocateHhold(). Household expenditure vector must sum to total net change in alcohol and tobacco spending")
sum(expenditure)
sum(hhold_exp$hhold_exp)
testthat::expect_true(sum(hhold_exp$hhold_exp) == 0,
info = "Function: ReallocateHhold(). Household expenditure vector must sum to total net change in alcohol and tobacco spending")
sum(hhold_exp$hhold_exp)
testthat::expect_true(round(sum(hhold_exp$hhold_exp),10) == 0,
info = "Function: ReallocateHhold(). Household expenditure vector must sum to total net change in alcohol and tobacco spending")
?expect_true
testthat::expect_true(round(sum(hhold_exp$hhold_exp) + saving_rate*sum(expenditure),10) == 0 + saving_rate*sum(expenditure),
info = "Function: ReallocateHhold(). Household expenditure vector must sum to total net change in alcohol and tobacco spending")
library(tobalciomodel)
library(tobalciomodel)
