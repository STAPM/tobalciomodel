map_to_FAI <- merge(x, merge_data, by = c("CPA_code","Product"))
View(map_to_FAI)
FAI <- map_to_FAI[, .(hhold_exp = sum(hhold_exp)), by = c("IOC","Sector")]
View(FAI)
data <- tobalciomodel::iotable_fai
names(data)
FAI <- merge(FAI, tobalciomodel::iotable_fai[,"name"], by.x = "Sector", by.y = "name")
sectors <- tobalciomodel::iotable_fai[,"name"]
sectors <- as.data.frame(tobalciomodel::iotable_fai[,"name"])
FAI <- merge(FAI, sectors, by.x = "Sector", by.y = "name")
View(sectors)
sectors <- as.data.frame(tobalciomodel::iotable_fai[,"name"])
setDT(sectors)
setnames(sectors, names(sectors), "Sector")
FAI <- merge(FAI, sectors, by = "Sector", all = TRUE)
View(FAI)
FAI <- map_to_FAI[, .(hhold_exp = sum(hhold_exp)), by = c("IOC","Sector")]
## merge to the names of the FAI IO table to get the 3 disaggregated alcohol sectors
sectors <- as.data.frame(tobalciomodel::iotable_fai[,"name"])
setDT(sectors)
setnames(sectors, names(sectors), "Sector")
FAI <- merge(sectors, FAI, by = "Sector", all = TRUE, sort = FALSE)
View(FAI)
FAI[Sector == %in% "Manufacture Of Tobacco Products", hhold_exp := expenditure[3]]
FAI[Sector %in% "Manufacture Of Tobacco Products", hhold_exp := expenditure[3]]
View(FAI)
expenditure[3]
View(FAI)
FAI[Sector %in% "Manufacture Of Tobacco Products", hhold_exp := expenditure[3]]
View(FAI)
FAI[18, hhold_exp := expenditure[3]]
View(FAI)
FAI[61, hhold_exp := expenditure[1]]
View(FAI)
roxygen2::roxygenise()
library(tobalciomodel)
expenditure = 10
rm(list = ls())
expenditure = 10
vector = "central"
vectors_data = tobalciomodel::vectors_govt
View(vectors_data)
# calculate the amount of expenditure that will be reallocated
exp <- expenditure
# select the chosen reallocation vector
if (vector == "central") {
v <- as.vector(as.matrix( vectors_data[,3] ))
} else if (vector == "local") {
v <- as.vector(as.matrix( vectors_data[,4] ))
} else if (vector == "total") {
v <- as.vector(as.matrix( vectors_data[,5] ))
} else if (vector == "all_pubadmin") {
v <- as.vector(as.matrix( vectors_data[,6] ))
} else if (vector == "all_education") {
v <- as.vector(as.matrix( vectors_data[,7] ))
} else if (vector == "all_health") {
v <- as.vector(as.matrix( vectors_data[,8] ))
} else if (vector == "all_socialwork") {
v <- as.vector(as.matrix( vectors_data[,9] ))
} else if (vector == "all_cultural") {
v <- as.vector(as.matrix( vectors_data[,10] ))
}
# redistribute the expenditure along the vector
govt_exp <- exp*v
govt_exp <- cbind(vectors_data[,c(1,2)],govt_exp)
View(govt_exp)
sectors <- as.data.frame(tobalciomodel::iotable_fai[,"name"])
setDT(sectors)
setnames(sectors, names(sectors), "Sector")
## extract the CPA/IOC lookup table and merge, collapsing by FAI categories
merge_data <- unique(tobalciomodel::sic_cpa_fai_mapping[,c("CPA_code","Product","IOC","Sector")])
map_to_FAI <- merge(x, merge_data, by = c("CPA_code","Product"))
FAI <- map_to_FAI[, .(hhold_exp = sum(hhold_exp)), by = c("IOC","Sector")]
## merge to the names of the FAI IO table to get the 3 disaggregated alcohol sectors
sectors <- as.data.frame(tobalciomodel::iotable_fai[,"name"])
setDT(sectors)
setnames(sectors, names(sectors), "Sector")
merge_data <- unique(tobalciomodel::sic_cpa_fai_mapping[,c("CPA_code","Product","IOC","Sector")])
map_to_FAI <- merge(govt_exp, merge_data, by = c("CPA_code","Product"))
FAI <- map_to_FAI[, .(hhold_exp = sum(hhold_exp)), by = c("IOC","Sector")]
View(map_to_FAI)
FAI <- map_to_FAI[, .(govt_exp = sum(govt_exp)), by = c("IOC","Sector")]
sectors <- as.data.frame(tobalciomodel::iotable_fai[,"name"])
setDT(sectors)
setnames(sectors, names(sectors), "Sector")
FAI <- merge(sectors, FAI, by = "Sector", all = TRUE, sort = FALSE)
View(FAI)
FAI[61, hhold_exp := 0]
FAI[c(69,71), hhold_exp := 0]
FAI[18, hhold_exp := 0]
govt_exp <- copy(FAI)
summary(govt_exp)
rm(list = ls())
FAI = TRUE
expenditure = 10
vector = "central"
vectors_data = tobalciomodel::vectors_govt
FAI = FALSE
FAI = TRUE
# calculate the amount of expenditure that will be reallocated
exp <- expenditure
# select the chosen reallocation vector
if (vector == "central") {
v <- as.vector(as.matrix( vectors_data[,3] ))
} else if (vector == "local") {
v <- as.vector(as.matrix( vectors_data[,4] ))
} else if (vector == "total") {
v <- as.vector(as.matrix( vectors_data[,5] ))
} else if (vector == "all_pubadmin") {
v <- as.vector(as.matrix( vectors_data[,6] ))
} else if (vector == "all_education") {
v <- as.vector(as.matrix( vectors_data[,7] ))
} else if (vector == "all_health") {
v <- as.vector(as.matrix( vectors_data[,8] ))
} else if (vector == "all_socialwork") {
v <- as.vector(as.matrix( vectors_data[,9] ))
} else if (vector == "all_cultural") {
v <- as.vector(as.matrix( vectors_data[,10] ))
}
# redistribute the expenditure along the vector
govt_exp <- exp*v
govt_exp <- cbind(vectors_data[,c(1,2)],govt_exp)
if (FAI == TRUE) {
## extract the CPA/IOC lookup table and merge, collapsing by FAI categories
merge_data <- unique(tobalciomodel::sic_cpa_fai_mapping[,c("CPA_code","Product","IOC","Sector")])
map_to_FAI <- merge(govt_exp, merge_data, by = c("CPA_code","Product"))
FAI <- map_to_FAI[, .(govt_exp = sum(govt_exp)), by = c("IOC","Sector")]
## merge to the names of the FAI IO table to get the 3 disaggregated alcohol sectors
sectors <- as.data.frame(tobalciomodel::iotable_fai[,"name"])
setDT(sectors)
setnames(sectors, names(sectors), "Sector")
FAI <- merge(sectors, FAI, by = "Sector", all = TRUE, sort = FALSE)
## fill in the three alcohol categories and manufacture of tobacco with the initial changes
## to expenditure (these are always 0 for govt spending)
FAI[61, hhold_exp := 0]
FAI[c(69,71), hhold_exp := 0]
FAI[18, hhold_exp := 0]
govt_exp <- copy(FAI)
}
summary(govt_exp)
# calculate the amount of expenditure that will be reallocated
exp <- expenditure
# select the chosen reallocation vector
if (vector == "central") {
v <- as.vector(as.matrix( vectors_data[,3] ))
} else if (vector == "local") {
v <- as.vector(as.matrix( vectors_data[,4] ))
} else if (vector == "total") {
v <- as.vector(as.matrix( vectors_data[,5] ))
} else if (vector == "all_pubadmin") {
v <- as.vector(as.matrix( vectors_data[,6] ))
} else if (vector == "all_education") {
v <- as.vector(as.matrix( vectors_data[,7] ))
} else if (vector == "all_health") {
v <- as.vector(as.matrix( vectors_data[,8] ))
} else if (vector == "all_socialwork") {
v <- as.vector(as.matrix( vectors_data[,9] ))
} else if (vector == "all_cultural") {
v <- as.vector(as.matrix( vectors_data[,10] ))
}
# redistribute the expenditure along the vector
govt_exp <- exp*v
govt_exp <- cbind(vectors_data[,c(1,2)],govt_exp)
if (FAI == TRUE) {
## extract the CPA/IOC lookup table and merge, collapsing by FAI categories
merge_data <- unique(tobalciomodel::sic_cpa_fai_mapping[,c("CPA_code","Product","IOC","Sector")])
map_to_FAI <- merge(govt_exp, merge_data, by = c("CPA_code","Product"))
FAI <- map_to_FAI[, .(govt_exp = sum(govt_exp)), by = c("IOC","Sector")]
## merge to the names of the FAI IO table to get the 3 disaggregated alcohol sectors
sectors <- as.data.frame(tobalciomodel::iotable_fai[,"name"])
setDT(sectors)
setnames(sectors, names(sectors), "Sector")
FAI <- merge(sectors, FAI, by = "Sector", all = TRUE, sort = FALSE)
## fill in the three alcohol categories and manufacture of tobacco with the initial changes
## to expenditure (these are always 0 for govt spending)
FAI[61, govt_exp := 0]
FAI[c(69,71), govt_exp := 0]
FAI[18, govt_exp := 0]
govt_exp <- copy(FAI)
}
FAI = TRUE
# calculate the amount of expenditure that will be reallocated
exp <- expenditure
# select the chosen reallocation vector
if (vector == "central") {
v <- as.vector(as.matrix( vectors_data[,3] ))
} else if (vector == "local") {
v <- as.vector(as.matrix( vectors_data[,4] ))
} else if (vector == "total") {
v <- as.vector(as.matrix( vectors_data[,5] ))
} else if (vector == "all_pubadmin") {
v <- as.vector(as.matrix( vectors_data[,6] ))
} else if (vector == "all_education") {
v <- as.vector(as.matrix( vectors_data[,7] ))
} else if (vector == "all_health") {
v <- as.vector(as.matrix( vectors_data[,8] ))
} else if (vector == "all_socialwork") {
v <- as.vector(as.matrix( vectors_data[,9] ))
} else if (vector == "all_cultural") {
v <- as.vector(as.matrix( vectors_data[,10] ))
}
# redistribute the expenditure along the vector
govt_exp <- exp*v
govt_exp <- cbind(vectors_data[,c(1,2)],govt_exp)
if (FAI == TRUE) {
## extract the CPA/IOC lookup table and merge, collapsing by FAI categories
merge_data <- unique(tobalciomodel::sic_cpa_fai_mapping[,c("CPA_code","Product","IOC","Sector")])
map_to_FAI <- merge(govt_exp, merge_data, by = c("CPA_code","Product"))
FAI_data <- map_to_FAI[, .(govt_exp = sum(govt_exp)), by = c("IOC","Sector")]
## merge to the names of the FAI IO table to get the 3 disaggregated alcohol sectors
sectors <- as.data.frame(tobalciomodel::iotable_fai[,"name"])
setDT(sectors)
setnames(sectors, names(sectors), "Sector")
FAI_data <- merge(sectors, FAI_data, by = "Sector", all = TRUE, sort = FALSE)
## fill in the three alcohol categories and manufacture of tobacco with the initial changes
## to expenditure (these are always 0 for govt spending)
FAI_data[61, govt_exp := 0]
FAI_data[c(69,71), govt_exp := 0]
FAI_data[18, govt_exp := 0]
govt_exp <- copy(FAI)
}
summary(govt_exp)
# calculate the amount of expenditure that will be reallocated
exp <- expenditure
# select the chosen reallocation vector
if (vector == "central") {
v <- as.vector(as.matrix( vectors_data[,3] ))
} else if (vector == "local") {
v <- as.vector(as.matrix( vectors_data[,4] ))
} else if (vector == "total") {
v <- as.vector(as.matrix( vectors_data[,5] ))
} else if (vector == "all_pubadmin") {
v <- as.vector(as.matrix( vectors_data[,6] ))
} else if (vector == "all_education") {
v <- as.vector(as.matrix( vectors_data[,7] ))
} else if (vector == "all_health") {
v <- as.vector(as.matrix( vectors_data[,8] ))
} else if (vector == "all_socialwork") {
v <- as.vector(as.matrix( vectors_data[,9] ))
} else if (vector == "all_cultural") {
v <- as.vector(as.matrix( vectors_data[,10] ))
}
# redistribute the expenditure along the vector
govt_exp <- exp*v
govt_exp <- cbind(vectors_data[,c(1,2)],govt_exp)
if (FAI == TRUE) {
## extract the CPA/IOC lookup table and merge, collapsing by FAI categories
merge_data <- unique(tobalciomodel::sic_cpa_fai_mapping[,c("CPA_code","Product","IOC","Sector")])
map_to_FAI <- merge(govt_exp, merge_data, by = c("CPA_code","Product"))
FAI_data <- map_to_FAI[, .(govt_exp = sum(govt_exp)), by = c("IOC","Sector")]
## merge to the names of the FAI IO table to get the 3 disaggregated alcohol sectors
sectors <- as.data.frame(tobalciomodel::iotable_fai[,"name"])
setDT(sectors)
setnames(sectors, names(sectors), "Sector")
FAI_data <- merge(sectors, FAI_data, by = "Sector", all = TRUE, sort = FALSE)
## fill in the three alcohol categories and manufacture of tobacco with the initial changes
## to expenditure (these are always 0 for govt spending)
FAI_data[61, govt_exp := 0]
FAI_data[c(69,71), govt_exp := 0]
FAI_data[18, govt_exp := 0]
govt_exp <- copy(FAI_data)
}
summary(govt_exp)
roxygen2::roxygenise()
library(tobalciomodel)
usethis::use_version()
roxygen2::roxygenise()
library(tobalciomodel)
policy_effect_year = 2022
n_years = 5
max_year <- policy_effect_year + n_years - 1
max_year
policy_effect_year:max_year
roxygen2::roxygenise()
library(tobalciomodel)
roxygen2::roxygenise()
library(tobalciomodel)
library(tobalciomodel)
library(tobalciomodel)
library(tobalciomodel)
tobalciomodel::iotable_fai
roxygen2::roxygenise()
library(tobalciomodel)
library(tobalciomodel)
library(tobalciomodel)
library(tobalciomodel)
library(tobalciomodel)
roxygen2::roxygenise()
library(tobalciomodel)
help(package = tobalciomodel)
library(readxl)
library(data.table)
## read in the SIC - CPA mapping sheet
map <- readxl::read_excel("data-raw/FAI SIC mapping.xlsx",
range = "A1:D613",
col_names = TRUE)
setDT(map)
map[, SIC_code := as.numeric(SIC_code)]
year <- 2020
earn <- readxl::read_excel(paste0("data-raw/SIC07 Industry (4) SIC2007 Table 16.7a   Annual pay - Gross ",2020,".xls"),
sheet = "All",
range = "A5:F997",
col_names = TRUE)
setDT(earn)
earn <- earn[,c(1:3,6)]
setnames(earn,
names(earn),
c("Industry","SIC_code","njobs","salary"))
earn[, SIC_code := as.numeric(SIC_code)]
### merge to the mapping file to isolate the 4-digit level industries
earn <- merge.data.table(earn,map[,"Industry"],by = "Industry", all.x = FALSE, all.y = TRUE, sort = FALSE)
### some duplicates - if a 3-digit industry has only one 4-digit component, they will have the same name
earn[, max := max(SIC_code), by = "Industry"]
earn <- earn[SIC_code == max,]
### this produces the 612 industries in the mapping file
earn <- earn[,-c("max")]
### set as numeric
earn[, salary := as.numeric(salary)]
earn[, njobs := as.numeric(njobs)]
View(earn)
### need employment to use as weights when mapping earnings to CPA but in ASHE data
### much of the njobs entries are missing, so match in FTE employment from the BRES/LFS data
### for the most recent year of data. Use LFS FTE totals as weights
source("data-raw/data processing - employment data LFS.R")
### need employment to use as weights when mapping earnings to CPA but in ASHE data
### much of the njobs entries are missing, so match in FTE employment from the BRES/LFS data
### for the most recent year of data. Use LFS FTE totals as weights
source("data-raw/data processing - employment data LFS.R")
source("data-raw/data processing - employment data LFS.R")
View(data)
library(lfsclean)
library(readxl)
library(data.table)
library(magrittr)
### LFS employment data
## construct 4-digit employment by industry-year from the Labour Force Survey
root <- "D:/"
file <- "Work Documents/Datasets/Labour Force Survey/raw data/"
vars <- c("year","quarter","pwt","age","gender","lmstatus","full_time","sic2007_4dig")
data <- combine_years(list(
lfs_clean_global(lfs_read_2010(root,file),keep_vars = vars),
lfs_clean_global(lfs_read_2011(root,file),keep_vars = vars),
lfs_clean_global(lfs_read_2012(root,file),keep_vars = vars),
lfs_clean_global(lfs_read_2013(root,file),keep_vars = vars),
lfs_clean_global(lfs_read_2014(root,file),keep_vars = vars),
lfs_clean_global(lfs_read_2015(root,file),keep_vars = vars),
lfs_clean_global(lfs_read_2016(root,file),keep_vars = vars),
lfs_clean_global(lfs_read_2017(root,file),keep_vars = vars),
lfs_clean_global(lfs_read_2018(root,file),keep_vars = vars),
lfs_clean_global(lfs_read_2019(root,file),keep_vars = vars),
lfs_clean_global(lfs_read_2020(root,file),keep_vars = vars)
)
)
## restrict to all employed/self-employed with complete information on
## full time status and industry
data <- data[lmstatus=="employed"|lmstatus=="self employed" ,]
data <- data[!is.na(full_time) ,]
data <- data[!is.na(sic2007_4dig) ,]
## calculate fte employment by industry and quarter
data[full_time == "full_time",fte_ := 1]
data[full_time == "part_time",fte_ := 0.5]
data[, fte   := sum(pwt*fte_), by = c("time","sic2007_4dig")]
data[, total := sum(pwt ),     by = c("time","sic2007_4dig")]
data <- unique(data[,c("time","year","sic2007_4dig","fte","total")])
## now average employment across quarters within years
data[, fte_   := mean(fte)  , by = c("year","sic2007_4dig")]
data[, total_ := mean(total), by = c("year","sic2007_4dig")]
data <- unique(data[,c("year","sic2007_4dig","fte_","total_")])
setnames(data,
c("sic2007_4dig","fte_","total_"),
c("SIC_code","fte","total"))
data[, SIC_code := as.numeric(as.character(SIC_code))]
########################################################################################
##### Map SIC Employment onto the FAI categories for the alcohol-disaggregated table ###
## read in the SIC - FAI mapping sheet
map <- readxl::read_excel("data-raw/FAI SIC mapping.xlsx",
range = "A1:D612",
col_names = TRUE)
setDT(map)
map[, SIC_code := as.numeric(SIC_code)]
## read in FAI sectors and get output proportions
sectors <- readxl::read_excel("data-raw/2010_UK_Alcohol_consumption_disaggregated_IxI.xlsx",
range = "B5:C111")
setDT(sectors)
setnames(sectors, names(sectors), c("IOC","Product"))
output <- readxl::read_excel("data-raw/2010_UK_Alcohol_consumption_disaggregated_IxI.xlsx",
range = "D120:DE120",
col_names = FALSE)
output <- as.vector(as.matrix(output))
output <- cbind(sectors,output)
sec1_alc_prop <- as.numeric(output[61,"output"]/(output[60,"output"] + output[61,"output"]))
sec2_alc_prop <- as.numeric(output[69,"output"]/(output[68,"output"] + output[69,"output"]))
sec3_alc_prop <- as.numeric(output[71,"output"]/(output[70,"output"] + output[71,"output"]))
rm(output)
## loop over years
for (y in 2010:2020) {
empl <- data[year == y,]
## map onto the FAI categories
merge <- merge.data.table(map, empl, by = "SIC_code", all.x = TRUE)
merge[is.na(total), total := 0]
merge[is.na(fte), fte := 0]
merge[, tot_emp := sum(total, na.rm=TRUE), by = "IOC"]
merge[, tot_fte := sum(fte, na.rm=TRUE)  , by = "IOC"]
merge <- unique(merge[,c("IOC","Product","tot_emp","tot_fte")])
### need to create the 3 disaggregated alcohol sectors.
### apportion employment in line with the output ratio between the
### alcohol and non-alcohol sectors
fai_empl <- merge.data.table(sectors, merge, by = c("IOC","Product"), all.x = TRUE, sort = FALSE)
sec1_alc_emp <- as.numeric(fai_empl[60,"tot_emp"])
sec2_alc_emp <- as.numeric(fai_empl[68,"tot_emp"])
sec3_alc_emp <- as.numeric(fai_empl[70,"tot_emp"])
sec1_alc_fte <- as.numeric(fai_empl[60,"tot_fte"])
sec2_alc_fte <- as.numeric(fai_empl[68,"tot_fte"])
sec3_alc_fte <- as.numeric(fai_empl[70,"tot_fte"])
#### fill in the missing alcohol categories
## Wholesale/Retail
fai_empl[61, tot_emp :=  sec1_alc_emp*sec2_alc_prop]
fai_empl[60, tot_emp :=  sec1_alc_emp*(1-sec1_alc_prop)]
fai_empl[61, tot_fte :=  sec1_alc_fte*sec2_alc_prop]
fai_empl[60, tot_fte :=  sec1_alc_fte*(1-sec1_alc_prop)]
## Food and Beverage
fai_empl[69, tot_emp :=  sec2_alc_emp*sec2_alc_prop]
fai_empl[68, tot_emp :=  sec2_alc_emp*(1-sec2_alc_prop)]
fai_empl[69, tot_fte :=  sec2_alc_fte*sec2_alc_prop]
fai_empl[68, tot_fte :=  sec2_alc_fte*(1-sec2_alc_prop)]
## Food and Beverage
fai_empl[71, tot_emp :=  sec3_alc_emp*sec3_alc_prop]
fai_empl[70, tot_emp :=  sec3_alc_emp*(1-sec3_alc_prop)]
fai_empl[71, tot_fte :=  sec3_alc_fte*sec3_alc_prop]
fai_empl[70, tot_fte :=  sec3_alc_fte*(1-sec3_alc_prop)]
fai_empl[, year := y]
assign(paste("lfs_empl_fai",y,sep="."),fai_empl)
}
lfs_empl_fai <- rbindlist(list(lfs_empl_fai.2010,
lfs_empl_fai.2011,
lfs_empl_fai.2012,
lfs_empl_fai.2013,
lfs_empl_fai.2014,
lfs_empl_fai.2015,
lfs_empl_fai.2016,
lfs_empl_fai.2017,
lfs_empl_fai.2018,
lfs_empl_fai.2019,
lfs_empl_fai.2020))
usethis::use_data(lfs_empl_fai,overwrite = TRUE)
rm(map)
#######################################################################
##### Map SIC Employment onto the CPA categories for the ONS tables ###
## read in the SIC - CPA mapping sheet
map <- readxl::read_excel("data-raw/CPA SIC mapping.xlsx",
range = "A1:D613",
col_names = TRUE)
setDT(map)
map[, SIC_code := as.numeric(SIC_code)]
## loop over years - merge in the mapping, assign 0s to 4-digit SIC
## industries not in the LFS (small sectors not captured in the sampling)
## and produce clean tables for SIC and CPA employment by year
for (y in 2010:2020) {
empl <- data[year == y,]
## map onto the CPA categories
merge <- merge.data.table(map, empl, by = "SIC_code", all.x = TRUE)
merge[is.na(total), total := 0]
merge[is.na(fte), fte := 0]
merge_sic <- merge[,c("SIC_code","Industry","total","fte")]
setnames(merge_sic, c("total","fte"), c("tot_emp","tot_fte"))
merge[, tot_emp := sum(total, na.rm=TRUE), by = "CPA_code"]
merge[, tot_fte := sum(fte, na.rm=TRUE)  , by = "CPA_code"]
merge <- unique(merge[,c("CPA_code","Product","tot_emp","tot_fte")])
merge[, year := y]
merge_sic[, year := y]
assign(paste("lfs_empl_sic",y,sep="."),merge_sic)
assign(paste("lfs_empl_cpa",y,sep="."),merge)
}
lfs_empl_cpa <- rbindlist(list(lfs_empl_cpa.2010,
lfs_empl_cpa.2011,
lfs_empl_cpa.2012,
lfs_empl_cpa.2013,
lfs_empl_cpa.2014,
lfs_empl_cpa.2015,
lfs_empl_cpa.2016,
lfs_empl_cpa.2017,
lfs_empl_cpa.2018,
lfs_empl_cpa.2019,
lfs_empl_cpa.2020))
lfs_empl_sic <- rbindlist(list(lfs_empl_sic.2010,
lfs_empl_sic.2011,
lfs_empl_sic.2012,
lfs_empl_sic.2013,
lfs_empl_sic.2014,
lfs_empl_sic.2015,
lfs_empl_sic.2016,
lfs_empl_sic.2017,
lfs_empl_sic.2018,
lfs_empl_sic.2019,
lfs_empl_sic.2020))
usethis::use_data(lfs_empl_cpa,overwrite = TRUE)
library(tobalciomodel)
map <- read.csv("data-raw/FAI SIC mapping.csv")
View(map)
library(readxl)
library(data.table)
## read in the SIC - CPA mapping sheet
map <- read.csv("data-raw/FAI SIC mapping.csv")
setDT(map)
setnames(map, names(map), c("Industry","SIC_code","IOC","Sector"))
map[, SIC_code := as.numeric(SIC_code)]
### ASHE earnings data
year <- 2020
earn <- readxl::read_excel(paste0("data-raw/SIC07 Industry (4) SIC2007 Table 16.7a   Annual pay - Gross ",2020,".xls"),
sheet = "All",
range = "A5:F997",
col_names = TRUE)
