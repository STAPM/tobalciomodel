### for the most recent year of data. Use LFS FTE totals as weights
library(lfsclean)
library(readxl)
library(data.table)
library(magrittr)
### LFS employment data
## construct 4-digit employment by industry-year from the Labour Force Survey
root <- "D:/"
file <- "Datasets/Labour Force Survey/raw data/"
vars <- c("year","quarter","pwt","age","gender","lmstatus","full_time","sic2007_4dig")
data <- combine_years(list(
lfs_clean_global(lfs_read_2010(root,file),keep_vars = vars),
lfs_clean_global(lfs_read_2011(root,file),keep_vars = vars),
lfs_clean_global(lfs_read_2012(root,file),keep_vars = vars),
lfs_clean_global(lfs_read_2013(root,file),keep_vars = vars),
lfs_clean_global(lfs_read_2014(root,file),keep_vars = vars),
lfs_clean_global(lfs_read_2015(root,file),keep_vars = vars),
lfs_clean_global(lfs_read_2016(root,file),keep_vars = vars),
lfs_clean_global(lfs_read_2017(root,file),keep_vars = vars),
lfs_clean_global(lfs_read_2018(root,file),keep_vars = vars),
lfs_clean_global(lfs_read_2019(root,file),keep_vars = vars),
lfs_clean_global(lfs_read_2020(root,file),keep_vars = vars)
)
)
## restrict to all employed/self-employed with complete information on
## full time status and industry
data <- data[lmstatus=="employed"|lmstatus=="self employed" ,]
data <- data[!is.na(full_time) ,]
data <- data[!is.na(sic2007_4dig) ,]
## calculate fte employment by industry and quarter
data[full_time == "full_time",fte_ := 1]
data[full_time == "part_time",fte_ := 0.5]
data[, fte   := sum(pwt*fte_), by = c("time","sic2007_4dig")]
data[, total := sum(pwt ),     by = c("time","sic2007_4dig")]
data <- unique(data[,c("time","year","sic2007_4dig","fte","total")])
## now average employment across quarters within years
data[, fte_   := mean(fte)  , by = c("year","sic2007_4dig")]
data[, total_ := mean(total), by = c("year","sic2007_4dig")]
data <- unique(data[,c("year","sic2007_4dig","fte_","total_")])
setnames(data,
c("sic2007_4dig","fte_","total_"),
c("SIC_code","fte","total"))
data[, SIC_code := as.numeric(as.character(SIC_code))]
lfs_empl <- data[, .(fte = mean(fte, na.rm = TRUE),
total = mean(total,na.rm = TRUE)),
by = "SIC_code"]
### merge employment and earnings data. collapse to FAI industry level.
data <- merge(earn, lfs_empl, by = c("SIC_code"), all.x = TRUE)
data <- data[, .(avg_salary = weighted.mean(salary, w = fte, na.rm=TRUE) ) ,
by = c("IOC","Sector")]
fai_data <- tobalciomodel::lfs_empl_fai[year == 2010,c("IOC")]
View(fai_data)
View(data)
library(readxl)
library(data.table)
## read in the SIC - CPA mapping sheet
map <- read.csv("data-raw/FAI SIC mapping.csv")
setDT(map)
setnames(map, names(map), c("Industry","SIC_code","IOC","Sector"))
map[, SIC_code := as.numeric(SIC_code)]
### ASHE earnings data
year <- 2020
earn <- readxl::read_excel(paste0("data-raw/SIC07 Industry (4) SIC2007 Table 16.7a   Annual pay - Gross ",2020,".xls"),
sheet = "All",
range = "A5:S997",
col_names = TRUE)
setDT(earn)
earn <- earn[,c(1:3,6,18,19)]
setnames(earn,
names(earn),
c("Industry","SIC_code","njobs","salary","Digit4","Digit3"))
earn[, SIC_code := as.numeric(SIC_code)]
earn <- earn[Digit4 == 1,]
### set as numeric
earn[, salary := as.numeric(salary)]
earn[, njobs := as.numeric(njobs)]
## merge to the FAI mapping
earn <- earn[,c("Industry","SIC_code","salary")]
earn <- merge(earn, map, by = c("SIC_code"))
### need employment to use as weights when mapping earnings to CPA but in ASHE data
### much of the njobs entries are missing, so match in FTE employment from the BRES/LFS data
### for the most recent year of data. Use LFS FTE totals as weights
library(lfsclean)
library(readxl)
library(data.table)
library(magrittr)
### LFS employment data
## construct 4-digit employment by industry-year from the Labour Force Survey
root <- "D:/"
file <- "Datasets/Labour Force Survey/raw data/"
vars <- c("year","quarter","pwt","age","gender","lmstatus","full_time","sic2007_4dig")
data <- combine_years(list(
lfs_clean_global(lfs_read_2010(root,file),keep_vars = vars),
lfs_clean_global(lfs_read_2011(root,file),keep_vars = vars),
lfs_clean_global(lfs_read_2012(root,file),keep_vars = vars),
lfs_clean_global(lfs_read_2013(root,file),keep_vars = vars),
lfs_clean_global(lfs_read_2014(root,file),keep_vars = vars),
lfs_clean_global(lfs_read_2015(root,file),keep_vars = vars),
lfs_clean_global(lfs_read_2016(root,file),keep_vars = vars),
lfs_clean_global(lfs_read_2017(root,file),keep_vars = vars),
lfs_clean_global(lfs_read_2018(root,file),keep_vars = vars),
lfs_clean_global(lfs_read_2019(root,file),keep_vars = vars),
lfs_clean_global(lfs_read_2020(root,file),keep_vars = vars)
)
)
## restrict to all employed/self-employed with complete information on
## full time status and industry
data <- data[lmstatus=="employed"|lmstatus=="self employed" ,]
data <- data[!is.na(full_time) ,]
data <- data[!is.na(sic2007_4dig) ,]
## calculate fte employment by industry and quarter
data[full_time == "full_time",fte_ := 1]
data[full_time == "part_time",fte_ := 0.5]
data[, fte   := sum(pwt*fte_), by = c("time","sic2007_4dig")]
data[, total := sum(pwt ),     by = c("time","sic2007_4dig")]
data <- unique(data[,c("time","year","sic2007_4dig","fte","total")])
## now average employment across quarters within years
data[, fte_   := mean(fte)  , by = c("year","sic2007_4dig")]
data[, total_ := mean(total), by = c("year","sic2007_4dig")]
data <- unique(data[,c("year","sic2007_4dig","fte_","total_")])
setnames(data,
c("sic2007_4dig","fte_","total_"),
c("SIC_code","fte","total"))
data[, SIC_code := as.numeric(as.character(SIC_code))]
lfs_empl <- data[, .(fte = mean(fte, na.rm = TRUE),
total = mean(total,na.rm = TRUE)),
by = "SIC_code"]
### merge employment and earnings data. collapse to FAI industry level.
data <- merge(earn, lfs_empl, by = c("SIC_code"), all.x = TRUE)
data <- data[, .(avg_salary = weighted.mean(salary, w = fte, na.rm=TRUE) ) ,
by = c("IOC","Sector")]
fai_data <- tobalciomodel::lfs_empl_fai[year == 2010,c("IOC","Product")]
final_data <- merge(x = fai_data,
y = data[,c("IOC","avg_salary")],
by = "IOC",
all = TRUE,
sort = FALSE)
# fill in alcohol disaggregated industries with the same wage as the aggregated sector.
sec1 <- as.numeric(final_data[IOC == 46, "avg_salary"])
sec2 <- as.numeric(final_data[IOC == 53, "avg_salary"])
sec3 <- as.numeric(final_data[IOC == 55, "avg_salary"])
final_data[61, avg_salary := sec1]
final_data[69, avg_salary := sec2]
final_data[71, avg_salary := sec3]
ashe_earn_fai <- copy(final_data)
View(ashe_earn_fai)
setnames(ashe_earn_fai, "Product", "Sector")
usethis::use_data(ashe_earn_fai, overwrite = TRUE)
roxygen2::roxygenise()
library(tobalciomodel)
library(tobalciomodel)
roxygen2::roxygenise()
### read in the flow table and other IO table elements into an R data file
library(readxl)
library(data.table)
path  <- "data-raw/"
file  <- "2010_UK_Alcohol_consumption_disaggregated_IxI.xlsx"
sheet <- "Sheet1"
#path  <- "data-raw/"
#file  <- "tobalciomodel.xlsx"
#sheet <- "Input Output Table"
### Read in the sector names
sector <- read_excel(path = paste0(path,file),
sheet = sheet,
range = "B6:C111",
col_names = FALSE)
View(sector)
### Read in the sector names
sector <- read_excel(path = paste0(path,file),
sheet = sheet,
range = "B6:C111",
col_names = FALSE)
setDT(sector)
setnames(sector, names(sector), c("IOC","Sector"))
View(sector)
### Read in the flowtable
flowtable <- read_excel(path = paste0(path,file),
sheet = sheet,
range = "D6:DE111",
col_names = FALSE)
### Read in the household consumption/demand and output rows
hhold.output <- read_excel(path = paste0(path,file),
sheet = sheet,
range = "D117:DE117",
col_names = FALSE)
hhold.demand <- read_excel(path = paste0(path,file),
sheet = sheet,
range = "DG6:DG111",
col_names = FALSE)
### Read in the final demand and total output
total.output <- read_excel(path = paste0(path,file),
sheet = sheet,
range = "D120:DE120",
col_names = FALSE)
final.demand <- read_excel(path = paste0(path,file),
sheet = sheet,
range = "DS6:DS111",
col_names = FALSE)
total.demand <- read_excel(path = paste0(path,file),
sheet = sheet,
range = "DT6:DT111",
col_names = FALSE)
govt.demand <- read_excel(path = paste0(path,file),
sheet = sheet,
range = "DI6:DI111",
col_names = FALSE)
gva.taxes <- read_excel(path = paste0(path,file),
sheet = sheet,
range = "D116:DE116",
col_names = FALSE)
gva.wages <- read_excel(path = paste0(path,file),
sheet = sheet,
range = "D117:DE117",
col_names = FALSE)
gva.gos <- read_excel(path = paste0(path,file),
sheet = sheet,
range = "D118:DE118",
col_names = FALSE)
gva.total <- read_excel(path = paste0(path,file),
sheet = sheet,
range = "D119:DE119",
col_names = FALSE)
flowtable <- as.matrix(flowtable)
total.demand <- as.matrix(total.demand)
final.demand <- as.matrix(final.demand)
govt.demand  <- as.matrix(govt.demand)
hhold.demand <- as.matrix(hhold.demand)
total.output <- as.vector(as.matrix(total.output))
hhold.output <- as.vector(as.matrix(hhold.output))
gva.taxes <- as.vector(as.matrix(gva.taxes))
gva.wages <- as.vector(as.matrix(gva.wages))
gva.gos   <- as.vector(as.matrix(gva.gos))
gva.total <- as.vector(as.matrix(gva.total))
iotable_fai <- data.table(sector,flowtable,hhold.demand,govt.demand,final.demand,hhold.output,total.output,total.demand,
gva.taxes,gva.wages,gva.gos,gva.total)
View(iotable_fai)
setnames(iotable_fai, old = names(iotable_fai), new = c("IOC","Sector",paste0("sec",c(1:106)),
"hhold.demand","govt.demand","final.demand",
"hhold.output","total.output","total.demand",
"gva.taxes","gva.wages","gva.gos","gva.total"))
### read in the flow table and other IO table elements into an R data file
library(readxl)
library(data.table)
path  <- "data-raw/"
file  <- "2010_UK_Alcohol_consumption_disaggregated_IxI.xlsx"
sheet <- "Sheet1"
#path  <- "data-raw/"
#file  <- "tobalciomodel.xlsx"
#sheet <- "Input Output Table"
### Read in the sector names
sector <- read_excel(path = paste0(path,file),
sheet = sheet,
range = "B6:C111",
col_names = FALSE)
setDT(sector)
setnames(sector, names(sector), c("IOC","Sector"))
### Read in the flowtable
flowtable <- read_excel(path = paste0(path,file),
sheet = sheet,
range = "D6:DE111",
col_names = FALSE)
### Read in the household consumption/demand and output rows
hhold.output <- read_excel(path = paste0(path,file),
sheet = sheet,
range = "D117:DE117",
col_names = FALSE)
hhold.demand <- read_excel(path = paste0(path,file),
sheet = sheet,
range = "DG6:DG111",
col_names = FALSE)
### Read in the final demand and total output
total.output <- read_excel(path = paste0(path,file),
sheet = sheet,
range = "D120:DE120",
col_names = FALSE)
final.demand <- read_excel(path = paste0(path,file),
sheet = sheet,
range = "DS6:DS111",
col_names = FALSE)
total.demand <- read_excel(path = paste0(path,file),
sheet = sheet,
range = "DT6:DT111",
col_names = FALSE)
govt.demand <- read_excel(path = paste0(path,file),
sheet = sheet,
range = "DI6:DI111",
col_names = FALSE)
gva.taxes <- read_excel(path = paste0(path,file),
sheet = sheet,
range = "D116:DE116",
col_names = FALSE)
gva.wages <- read_excel(path = paste0(path,file),
sheet = sheet,
range = "D117:DE117",
col_names = FALSE)
gva.gos <- read_excel(path = paste0(path,file),
sheet = sheet,
range = "D118:DE118",
col_names = FALSE)
gva.total <- read_excel(path = paste0(path,file),
sheet = sheet,
range = "D119:DE119",
col_names = FALSE)
flowtable <- as.matrix(flowtable)
total.demand <- as.matrix(total.demand)
final.demand <- as.matrix(final.demand)
govt.demand  <- as.matrix(govt.demand)
hhold.demand <- as.matrix(hhold.demand)
total.output <- as.vector(as.matrix(total.output))
hhold.output <- as.vector(as.matrix(hhold.output))
gva.taxes <- as.vector(as.matrix(gva.taxes))
gva.wages <- as.vector(as.matrix(gva.wages))
gva.gos   <- as.vector(as.matrix(gva.gos))
gva.total <- as.vector(as.matrix(gva.total))
iotable_fai <- data.table(sector,flowtable,hhold.demand,govt.demand,final.demand,hhold.output,total.output,total.demand,
gva.taxes,gva.wages,gva.gos,gva.total)
setnames(iotable_fai, old = names(iotable_fai), new = c("IOC","Sector",paste0("sec",c(1:106)),
"hhold.demand","govt.demand","final.demand",
"hhold.output","total.output","total.demand",
"gva.taxes","gva.wages","gva.gos","gva.total"))
### read in the flow table and other IO table elements into an R data file
library(readxl)
library(data.table)
path  <- "data-raw/"
file  <- "2010_UK_Alcohol_consumption_disaggregated_IxI.xlsx"
sheet <- "Sheet1"
#path  <- "data-raw/"
#file  <- "tobalciomodel.xlsx"
#sheet <- "Input Output Table"
### Read in the sector names
sector <- read_excel(path = paste0(path,file),
sheet = sheet,
range = "B6:C111",
col_names = FALSE)
setDT(sector)
setnames(sector, names(sector), c("IOC","Sector"))
### Read in the flowtable
flowtable <- read_excel(path = paste0(path,file),
sheet = sheet,
range = "D6:DE111",
col_names = FALSE)
### Read in the household consumption/demand and output rows
hhold.output <- read_excel(path = paste0(path,file),
sheet = sheet,
range = "D117:DE117",
col_names = FALSE)
hhold.demand <- read_excel(path = paste0(path,file),
sheet = sheet,
range = "DG6:DG111",
col_names = FALSE)
### Read in the final demand and total output
total.output <- read_excel(path = paste0(path,file),
sheet = sheet,
range = "D120:DE120",
col_names = FALSE)
final.demand <- read_excel(path = paste0(path,file),
sheet = sheet,
range = "DS6:DS111",
col_names = FALSE)
total.demand <- read_excel(path = paste0(path,file),
sheet = sheet,
range = "DT6:DT111",
col_names = FALSE)
govt.demand <- read_excel(path = paste0(path,file),
sheet = sheet,
range = "DI6:DI111",
col_names = FALSE)
gva.taxes <- read_excel(path = paste0(path,file),
sheet = sheet,
range = "D116:DE116",
col_names = FALSE)
gva.wages <- read_excel(path = paste0(path,file),
sheet = sheet,
range = "D117:DE117",
col_names = FALSE)
gva.gos <- read_excel(path = paste0(path,file),
sheet = sheet,
range = "D118:DE118",
col_names = FALSE)
gva.total <- read_excel(path = paste0(path,file),
sheet = sheet,
range = "D119:DE119",
col_names = FALSE)
flowtable <- as.matrix(flowtable)
total.demand <- as.matrix(total.demand)
final.demand <- as.matrix(final.demand)
govt.demand  <- as.matrix(govt.demand)
hhold.demand <- as.matrix(hhold.demand)
total.output <- as.vector(as.matrix(total.output))
hhold.output <- as.vector(as.matrix(hhold.output))
gva.taxes <- as.vector(as.matrix(gva.taxes))
gva.wages <- as.vector(as.matrix(gva.wages))
gva.gos   <- as.vector(as.matrix(gva.gos))
gva.total <- as.vector(as.matrix(gva.total))
iotable_fai <- data.table(sector,flowtable,hhold.demand,govt.demand,final.demand,hhold.output,total.output,total.demand,
gva.taxes,gva.wages,gva.gos,gva.total)
names(iotable_fai)
### read in the flow table and other IO table elements into an R data file
library(readxl)
library(data.table)
path  <- "data-raw/"
file  <- "2010_UK_Alcohol_consumption_disaggregated_IxI.xlsx"
sheet <- "Sheet1"
#path  <- "data-raw/"
#file  <- "tobalciomodel.xlsx"
#sheet <- "Input Output Table"
### Read in the sector names
sector <- read_excel(path = paste0(path,file),
sheet = sheet,
range = "B6:C111",
col_names = FALSE)
setDT(sector)
setnames(sector, names(sector), c("IOC","Sector"))
### Read in the flowtable
flowtable <- read_excel(path = paste0(path,file),
sheet = sheet,
range = "D6:DE111",
col_names = FALSE)
setDT(flowtable)
### Read in the household consumption/demand and output rows
hhold.output <- read_excel(path = paste0(path,file),
sheet = sheet,
range = "D117:DE117",
col_names = FALSE)
setDT(hhold.output)
hhold.demand <- read_excel(path = paste0(path,file),
sheet = sheet,
range = "DG6:DG111",
col_names = FALSE)
setDT(hhold.demand)
### Read in the final demand and total output
total.output <- read_excel(path = paste0(path,file),
sheet = sheet,
range = "D120:DE120",
col_names = FALSE)
setDT(total.output)
final.demand <- read_excel(path = paste0(path,file),
sheet = sheet,
range = "DS6:DS111",
col_names = FALSE)
setDT(final.demand)
total.demand <- read_excel(path = paste0(path,file),
sheet = sheet,
range = "DT6:DT111",
col_names = FALSE)
setDT(total.demand)
govt.demand <- read_excel(path = paste0(path,file),
sheet = sheet,
range = "DI6:DI111",
col_names = FALSE)
setDT(govt.demand)
gva.taxes <- read_excel(path = paste0(path,file),
sheet = sheet,
range = "D116:DE116",
col_names = FALSE)
setDT(gva.taxes)
gva.wages <- read_excel(path = paste0(path,file),
sheet = sheet,
range = "D117:DE117",
col_names = FALSE)
setDT(gva.wages)
gva.gos <- read_excel(path = paste0(path,file),
sheet = sheet,
range = "D118:DE118",
col_names = FALSE)
setDT(gva.gos)
gva.total <- read_excel(path = paste0(path,file),
sheet = sheet,
range = "D119:DE119",
col_names = FALSE)
setDT(gva.total)
View(gva.total)
View(gva.wages)
flowtable <- as.matrix(flowtable)
total.demand <- as.matrix(total.demand)
final.demand <- as.matrix(final.demand)
govt.demand  <- as.matrix(govt.demand)
hhold.demand <- as.matrix(hhold.demand)
total.output <- as.vector(as.matrix(total.output))
hhold.output <- as.vector(as.matrix(hhold.output))
gva.taxes <- as.vector(as.matrix(gva.taxes))
gva.wages <- as.vector(as.matrix(gva.wages))
gva.gos   <- as.vector(as.matrix(gva.gos))
gva.total <- as.vector(as.matrix(gva.total))
View(iotable_fai)
iotable_fai <- cbind(sector,flowtable,hhold.demand,govt.demand,final.demand,hhold.output,total.output,total.demand,
gva.taxes,gva.wages,gva.gos,gva.total)
View(iotable_fai)
flowtable <- as.matrix(flowtable)
total.demand <- as.vector(as.matrix(total.demand))
final.demand <- as.vector(as.matrix(final.demand))
govt.demand  <- as.vector(as.matrix(govt.demand))
hhold.demand <- as.vector(as.matrix(hhold.demand))
total.output <- as.vector(as.matrix(total.output))
hhold.output <- as.vector(as.matrix(hhold.output))
gva.taxes <- as.vector(as.matrix(gva.taxes))
gva.wages <- as.vector(as.matrix(gva.wages))
gva.gos   <- as.vector(as.matrix(gva.gos))
gva.total <- as.vector(as.matrix(gva.total))
iotable_fai <- cbind(sector,flowtable,hhold.demand,govt.demand,final.demand,hhold.output,total.output,total.demand,
gva.taxes,gva.wages,gva.gos,gva.total)
View(iotable_fai)
setnames(iotable_fai, old = names(iotable_fai), new = c("IOC","Sector", paste0("sec",c(1:106)),
"hhold.demand","govt.demand","final.demand",
"hhold.output","total.output","total.demand",
"gva.taxes","gva.wages","gva.gos","gva.total"))
usethis::use_data(iotable_fai,overwrite=TRUE)
roxygen2::roxygenise()
library(tobalciomodel)
library(tobalciomodel)
library(tobalciomodel)
library(tobalciomodel)
