data2 <- as.vector(as.matrix(data2))
}
## Model a minimum unit price (MUP) -------
if (alc.policy == "MUP") {
}
## Model a tax change -------
if (alc.policy == "MUP") {
}
## Save out results -------
# off-trade changes go into sector 61 - Wholesale Trade (Alcohol)
final.demand[61] <- data2[2]
# on-trade changes equally split between 69 - Accommodation (Alcohol) and 71 - Food and Beverage (Alcohol)
if (prob == FALSE) {
final.demand[69] <- data2[1]*0.5
final.demand[71] <- data2[1]*0.5
} else if (prob == TRUE) {
split <- runif(1)
final.demand[69] <- data2[1]*split
final.demand[71] <- data2[1]*(1-split)
}
direct.effect <- sum(final.demand)
names(tobalciomodel::iotable)
hhold.prop <- tobalciomodel::iotable$hhold.demand / sum(tobalciomodel::iotable$hhold.demand)
sum(hhold.prop)
reallocated.demand <- direct.effect*hhold.prop
reallocated.demand <- -1*(direct.effect*hhold.prop)
sum(reallocated.demand)
direct.effect
adjusted.final.demand <- reallocated.demand + final.demand
library(tobalciomodel)
rm(list = ls())
library(tobalciomodel)
library(data.table)
library(dplyr)
### Select data and parameters
inputs <- final_demand_inputs(yr = 2018,
scotland = FALSE,
elasticity = "meng14")
### Simulate a policy
policy_sim <- simulate_alcohol_policy(data = inputs,
alc.policy = "exog",
on.trade.ch = rep(-0.1,5),
off.trade.ch = rep(-0.1,5),
reallocate = FALSE,
prob = FALSE)
policy_sim_re <- simulate_alcohol_policy(data = inputs,
alc.policy = "exog",
on.trade.ch = rep(-0.1,5),
off.trade.ch = rep(-0.1,5),
reallocate = TRUE,
prob = FALSE)
library(tobalciomodel)
library(data.table)
library(dplyr)
### Select data and parameters
inputs <- final_demand_inputs(yr = 2018,
scotland = FALSE,
elasticity = "meng14")
### Simulate a policy
policy_sim <- simulate_alcohol_policy(data = inputs,
alc.policy = "exog",
on.trade.ch = rep(-0.1,5),
off.trade.ch = rep(0,5),
reallocate = FALSE,
prob = FALSE)
policy_sim_re <- simulate_alcohol_policy(data = inputs,
alc.policy = "exog",
on.trade.ch = rep(-0.1,5),
off.trade.ch = rep(0,5),
reallocate = TRUE,
prob = FALSE)
output.effects.1 <- sum(policy_sim*multipliers[,"output.multipliers.type1"])
output.effects.2 <- sum(policy_sim*multipliers[,"output.multipliers.type2"])
output.effects.1.re <- sum(policy_sim_re*multipliers[,"output.multipliers.type1"])
output.effects.2.re <- sum(policy_sim_re*multipliers[,"output.multipliers.type2"])
### Extract the multipliers
multipliers <- multipliers(yr = 2018,
empl = "fte")
### Output effects
output.effects.1 <- sum(policy_sim*multipliers[,"output.multipliers.type1"])
output.effects.2 <- sum(policy_sim*multipliers[,"output.multipliers.type2"])
output.effects.1.re <- sum(policy_sim_re*multipliers[,"output.multipliers.type1"])
output.effects.2.re <- sum(policy_sim_re*multipliers[,"output.multipliers.type2"])
help(package=tobalciomodel)
library(tobalciomodel)
names(tobalciomodel::iotable)
?iotable
library(tobalciomodel)
data <- tobalciomodel::iotable
name
data$name
data <- tobalciomodel::iotable[18,]
View(data)
library(reshape)
data_reshaped <- melt(data)
View(data_reshaped)
data <- tobalciomodel::iotable[18,]
names(data)
hhold <- data[,108]
total <- data[,112]
inter <- sum(data[,2:107])
rm(list = ls())
library(tobalciomodel)
library(reshape)
#### extract manufacturing of tobacco products
data <- tobalciomodel::iotable[18,]
tob.hhold <- data[,108]
tob.total <- data[,112]
tob.inter <- sum(data[,2:107])
tob.other <- tob.total - tob.inter - tob.hhold
data <- data[1:107,]
data_reshaped <- melt(data)
View(data_reshaped)
library(tidyverse)
data_reshaped <- melt(data) %>%
filter(!is.na(name))
View(data_reshaped)
data <- data[,1:107]
data_reshaped <- melt(data) %>%
filter(!is.na(name))
View(data_reshaped)
data_reshaped <- melt(data) %>%
filter(!is.na(name)) %>%
select(variable,value)
View(data)
prop.data <- rbind(tobalciomodel::iotable[,1],data_reshaped$value)
View(prop.data)
prop.data <- cbind(tobalciomodel::iotable[,"name"],data_reshaped$value)
View(prop.data)
prop.data <- cbind(as.character(tobalciomodel::iotable[,"name"]),
data_reshaped$value)
View(prop.data)
prop.data <- as.data.frame(prop.data)
prop.data <- prop.data %>%
mutate(prop = V2/tob.total)
prop.data <- cbind(as.character(tobalciomodel::iotable[,"name"]),
as.numeric(as.character(data_reshaped$value)))
prop.data <- as.data.frame(prop.data)
prop.data <- prop.data %>%
mutate(prop = V2/tob.total)
summary(prop.data)
prop.data$V2 <- as.numeric(as.character(V2))
prop.data$V2 <- as.numeric(as.character(prop.data$V2))
summary(prop.data)
prop.data <- as.data.frame(prop.data)
prop.data <- prop.data %>%
mutate(prop = V2/tob.total)
prop.data <- cbind(as.character(tobalciomodel::iotable[,"name"]),
data_reshaped$value)
prop.data$V2 <- as.numeric(as.character(prop.data$V2))
prop.data <- as.data.frame(prop.data)
prop.data <- prop.data %>%
mutate(prop = V2/tob.total) %>%
mutate(perc = prop*100)
prop.data <- cbind(as.character(tobalciomodel::iotable[,"name"]),
data_reshaped$value)
prop.data <- as.data.frame(prop.data)
prop.data$V2 <- as.numeric(as.character(prop.data$V2))
prop.data <- prop.data %>%
mutate(prop = V2/tob.total) %>%
mutate(perc = prop*100)
View(prop.data)
sum(prop.data$perc)
tob.hhold/tob.total
tob.other/tob.total
tob.inter/tob.total
tobalciomodel::iotable[17,]
tobalciomodel::iotable[16,1]
rm(list = ls())
library(tobalciomodel)
library(reshape)
library(tidyverse)
#### extract manufacturing of tobacco products
data <- tobalciomodel::iotable[18,]
tob.hhold <- data[,108]
tob.total <- data[,112]
tob.inter <- sum(data[,2:107])
tob.other <- tob.total - tob.inter - tob.hhold
data <- data[,1:107]
data_reshaped <- melt(data) %>%
filter(!is.na(name)) %>%
select(variable,value)
tob.prop.data <- cbind(as.character(tobalciomodel::iotable[,"name"]),
data_reshaped$value)
tob.prop.data <- as.data.frame(tob.prop.data)
tob.prop.data$V2 <- as.numeric(as.character(tob.prop.data$V2))
tob.prop.data <- tob.prop.data %>%
mutate(prop = V2/tob.total) %>%
mutate(perc = prop*100)
sum(tob.prop.data$perc)
tob.hhold/tob.total
tob.other/tob.total
tob.inter/tob.total
#### compare to manufacturing of alcohol products
data <- tobalciomodel::iotable[16,]
alc.hhold <- data[,108]
alc.total <- data[,112]
alc.inter <- sum(data[,2:107])
alc.other <- alc.total - alc.inter - alc.hhold
data <- data[,1:107]
data_reshaped <- melt(data) %>%
filter(!is.na(name)) %>%
select(variable,value)
alc.prop.data <- cbind(as.character(tobalciomodel::iotable[,"name"]),
data_reshaped$value)
alc.prop.data <- as.data.frame(alc.prop.data)
alc.prop.data$V2 <- as.numeric(as.character(alc.prop.data$V2))
alc.prop.data <- alc.prop.data %>%
mutate(prop = V2/alc.total) %>%
mutate(perc = prop*100)
sum(alc.prop.data$perc)
alc.hhold/alc.total
alc.other/alc.total
alc.inter/alc.total
help(package=tobalciomodel)
library(tobalciomodel)
library(data.table)
library(dplyr)
multipliers <- multipliers(yr = 2018,
empl = "fte")
View(multipliers)
yr <- 2010
empl <- fte
empl <- "fte"
## extract flow table and output/demand vectors
flowtable <- as.matrix(tobalciomodel::iotable[,grep("^[sec]", names(tobalciomodel::iotable), value=TRUE)])
total.output <- as.vector(as.matrix(tobalciomodel::iotable[,"total.output"]))
hhold.demand <- as.vector(as.matrix(tobalciomodel::iotable[,"hhold.demand"]))
hhold.output <- as.vector(as.matrix(tobalciomodel::iotable[,"hhold.output"]))
### Create the type 1 matrix
## Calculate coefficient matrix:
A <- flowtable %*% ((total.output )^-1 * diag(length(total.output)))
# Show A
# Identity matrix minus A
IminusA <- diag(length(total.output)) - A
# Calculate the Leontief Inverse matrix
L <- solve(IminusA)
## Create the type 2 matrix - endoegenous households
# create a new flowtable - add the employee output/compensation as an extra row and household demand as an extra columns
# the household-household transfer on the lead diagonal should be zero (households do not supply/demand from/to each other directly)
# in calculating A, the household consumption column is a fraction of total household
# income - total employee compensation plus total gross operating surplus
total.hhold.income <- 801796 + 504498
flow.table2 <- rbind(flowtable,hhold.output)        # add employment earnings as an extra row
flow.table2 <- cbind(flow.table2,c(hhold.demand,0))  # add household spending as an extra column (0 for no inter-household purchases)
## Calculate coefficient matrix:
A2 <- flow.table2 %*% (( c(total.output,total.hhold.income) )^-1 * diag(length( c(total.output,total.hhold.income)  ) ) )
# Identity matrix minus A
IminusA2 <- diag(length(c(total.output,sum(total.output)))) - A2
# Calculate the Leontief Inverse matrix
L2 <- solve(IminusA2)
L2
View(L2)
View(A)
View(A2)
View(A2)
## extract flow table and output/demand vectors
flowtable <- as.matrix(tobalciomodel::iotable[,grep("^[sec]", names(tobalciomodel::iotable), value=TRUE)])
total.output <- as.vector(as.matrix(tobalciomodel::iotable[,"total.output"]))
hhold.demand <- as.vector(as.matrix(tobalciomodel::iotable[,"hhold.demand"]))
hhold.output <- as.vector(as.matrix(tobalciomodel::iotable[,"hhold.output"]))
### Create the type 1 matrix
## Calculate coefficient matrix:
A <- flowtable %*% ((total.output )^-1 * diag(length(total.output)))
A <- round(A,5)
# Show A
# Identity matrix minus A
IminusA <- diag(length(total.output)) - A
# Calculate the Leontief Inverse matrix
L <- solve(IminusA)
## Create the type 2 matrix - endoegenous households
# create a new flowtable - add the employee output/compensation as an extra row and household demand as an extra columns
# the household-household transfer on the lead diagonal should be zero (households do not supply/demand from/to each other directly)
# in calculating A, the household consumption column is a fraction of total household
# income - total employee compensation plus total gross operating surplus
total.hhold.income <- 801796 + 504498
flow.table2 <- rbind(flowtable,hhold.output)        # add employment earnings as an extra row
flow.table2 <- cbind(flow.table2,c(hhold.demand,0))  # add household spending as an extra column (0 for no inter-household purchases)
## Calculate coefficient matrix:
A2 <- flow.table2 %*% (( c(total.output,total.hhold.income) )^-1 * diag(length( c(total.output,total.hhold.income)  ) ) )
A2 <- round(A2,5)
View(A2)
View(A)
IminusA2 <- diag(length(c(total.output,sum(total.output)))) - A2
View(IminusA2)
L2 <- solve(IminusA2)
View(L2)
L2 <- round(L2,5)
View(L)
L <- round(L,5)
View(L)
106/3
106/8
106/12
106/14
106/16
106/18
output.multipliers.type1 <- rep(NA,106)
output.multipliers.type2 <- rep(NA,106)
for (i in 1:106) {
output.multipliers.type1[i] <- sum(L[,i])
output.multipliers.type2[i] <- sum(L2[,i])
}
output.multipliers.type1
View(L2)
View(IminusA2)
## extract flow table and output/demand vectors
flowtable <- as.matrix(tobalciomodel::iotable[,grep("^[sec]", names(tobalciomodel::iotable), value=TRUE)])
total.output <- as.vector(as.matrix(tobalciomodel::iotable[,"total.output"]))
hhold.demand <- as.vector(as.matrix(tobalciomodel::iotable[,"hhold.demand"]))
hhold.output <- as.vector(as.matrix(tobalciomodel::iotable[,"hhold.output"]))
### Create the type 1 matrix
## Calculate coefficient matrix:
A <- flowtable %*% ((total.output )^-1 * diag(length(total.output)))
A <- round(A,5)
# Show A
# Identity matrix minus A
IminusA <- diag(length(total.output)) - A
# Calculate the Leontief Inverse matrix
L <- solve(IminusA)
L <- round(L,5)
## Create the type 2 matrix - endoegenous households
# create a new flowtable - add the employee output/compensation as an extra row and household demand as an extra columns
# the household-household transfer on the lead diagonal should be zero (households do not supply/demand from/to each other directly)
# in calculating A, the household consumption column is a fraction of total household
# income - total employee compensation across all sectors
total.hhold.income <- 801796
flow.table2 <- rbind(flowtable,hhold.output)        # add employment earnings as an extra row
flow.table2 <- cbind(flow.table2,c(hhold.demand,0))  # add household spending as an extra column (0 for no inter-household purchases)
## Calculate coefficient matrix:
A2 <- flow.table2 %*% (( c(total.output,total.hhold.income) )^-1 * diag(length( c(total.output,total.hhold.income)  ) ) )
A2 <- round(A2,5)
# Identity matrix minus A
IminusA2 <- diag(length(c(total.output,sum(total.output)))) - A2
# Calculate the Leontief Inverse matrix
L2 <- solve(IminusA2)
L2 <- round(L2,5)
720306+80917
1.33/0.4
flowtable <- as.matrix(tobalciomodel::iotable[,grep("^[sec]", names(tobalciomodel::iotable), value=TRUE)])
total.output <- as.vector(as.matrix(tobalciomodel::iotable[,"total.output"]))
hhold.demand <- as.vector(as.matrix(tobalciomodel::iotable[,"hhold.demand"]))
hhold.output <- as.vector(as.matrix(tobalciomodel::iotable[,"hhold.output"]))
hhold.demand
flow.table2 <- rbind(flowtable,hhold.output)        # add employment earnings as an extra row
flow.table2 <- cbind(flow.table2,c(hhold.demand,0))  # add household spending as an extra column (0 for no inter-household purchases)
View(flow.table2)
## Calculate coefficient matrix:
A2 <- flow.table2 %*% (( c(total.output,total.hhold.income) )^-1 * diag(length( c(total.output,total.hhold.income)  ) ) )
A2 <- round(A2,5)
# Identity matrix minus A
IminusA2 <- diag(length(c(total.output,sum(total.output)))) - A2
# Calculate the Leontief Inverse matrix
L2 <- solve(IminusA2)
L2 <- round(L2,5)
View(L2)
total.hhold.income <- 840117+80917
flow.table2 <- rbind(flowtable,hhold.output)        # add employment earnings as an extra row
flow.table2 <- cbind(flow.table2,c(hhold.demand,0))  # add household spending as an extra column (0 for no inter-household purchases)
## Calculate coefficient matrix:
A2 <- flow.table2 %*% (( c(total.output,total.hhold.income) )^-1 * diag(length( c(total.output,total.hhold.income)  ) ) )
A2 <- round(A2,5)
# Identity matrix minus A
IminusA2 <- diag(length(c(total.output,sum(total.output)))) - A2
# Calculate the Leontief Inverse matrix
L2 <- solve(IminusA2)
L2 <- round(L2,5)
View(L2)
View(A2)
output.multipliers.type1 <- rep(NA,106)
output.multipliers.type2 <- rep(NA,106)
for (i in 1:106) {
output.multipliers.type1[i] <- sum(L[,i])
output.multipliers.type2[i] <- sum(L2[,i])
}
output.multipliers.type2
output.multipliers.type1
library(tobalciomodel)
library(data.table)
library(dplyr)
### Select data and parameters
inputs <- final_demand_inputs(yr = 2018,
scotland = FALSE,
elasticity = "meng14")
### Simulate a policy
policy_sim <- simulate_alcohol_policy(data = inputs,
alc.policy = "exog",
on.trade.ch = rep(-0.1,5),
off.trade.ch = rep(0,5),
reallocate = FALSE,
prob = FALSE)
policy_sim_re <- simulate_alcohol_policy(data = inputs,
alc.policy = "exog",
on.trade.ch = rep(-0.1,5),
off.trade.ch = rep(0,5),
reallocate = TRUE,
prob = FALSE)
### Extract the multipliers
multipliers <- multipliers(yr = 2018,
empl = "fte")
### Output effects
output.effects.1 <- sum(policy_sim*multipliers[,"output.multipliers.type1"])
output.effects.2 <- sum(policy_sim*multipliers[,"output.multipliers.type2"])
### Select data and parameters
inputs <- final_demand_inputs(yr = 2010,
scotland = FALSE,
elasticity = "meng14")
### Simulate a policy
policy_sim <- simulate_alcohol_policy(data = inputs,
alc.policy = "exog",
on.trade.ch = rep(-0.1,5),
off.trade.ch = rep(0,5),
reallocate = FALSE,
prob = FALSE)
output.effects.1 <- sum(policy_sim*multipliers[,"output.multipliers.type1"])
output.effects.2 <- sum(policy_sim*multipliers[,"output.multipliers.type2"])
### Select data and parameters
inputs <- final_demand_inputs(yr = 2018,
scotland = FALSE,
elasticity = "meng14")
### Simulate a policy
policy_sim <- simulate_alcohol_policy(data = inputs,
alc.policy = "exog",
on.trade.ch = rep(-0.1,5),
off.trade.ch = rep(0,5),
reallocate = FALSE,
prob = FALSE)
policy_sim_re <- simulate_alcohol_policy(data = inputs,
alc.policy = "exog",
on.trade.ch = rep(-0.1,5),
off.trade.ch = rep(0,5),
reallocate = TRUE,
prob = FALSE)
## Extract the multipliers
multipliers <- multipliers(yr = 2018,
empl = "fte")
### Output effects
output.effects.1 <- sum(policy_sim*multipliers[,"output.multipliers.type1"])
output.effects.2 <- sum(policy_sim*multipliers[,"output.multipliers.type2"])
multipliers <- multipliers(yr = 2010,
empl = "fte")
### Output effects
output.effects.1 <- sum(policy_sim*multipliers[,"output.multipliers.type1"])
output.effects.2 <- sum(policy_sim*multipliers[,"output.multipliers.type2"])
### Extract the multipliers
multipliers <- multipliers(yr = 2018,
empl = "fte")
### Output effects
output.effects.1 <- sum(policy_sim*multipliers[,"output.multipliers.type1"])
output.effects.2 <- sum(policy_sim*multipliers[,"output.multipliers.type2"])
output.effects.1 <- round(sum(policy_sim*multipliers[,"output.multipliers.type1"]),3)
output.effects.2 <- round(sum(policy_sim*multipliers[,"output.multipliers.type2"]),3)
library(tobalciomodel)
library(tobalciomodel)
library(data.table)
library(dplyr)
### Select data and parameters
inputs <- final_demand_inputs(yr = 2018,
scotland = FALSE,
elasticity = "meng14")
### Simulate a policy
policy_sim <- simulate_alcohol_policy(data = inputs,
alc.policy = "exog",
on.trade.ch = rep(-0.1,5),
off.trade.ch = rep(0,5),
reallocate = FALSE,
prob = FALSE)
policy_sim_re <- simulate_alcohol_policy(data = inputs,
alc.policy = "exog",
on.trade.ch = rep(-0.1,5),
off.trade.ch = rep(0,5),
reallocate = TRUE,
prob = FALSE)
### Extract the multipliers
multipliers <- multipliers(yr = 2018,
empl = "fte")
### Output effects
output.effects.1 <- round(sum(policy_sim*multipliers[,"output.multipliers.type1"]),3)
output.effects.2 <- round(sum(policy_sim*multipliers[,"output.multipliers.type2"]),3)
output.effects.1 <- round(sum(policy_sim_re*multipliers[,"output.multipliers.type1"]),3)
output.effects.2 <- round(sum(policy_sim_re*multipliers[,"output.multipliers.type2"]),3)
library(tobalciomodel)
library(tobalciomodel)
library(data.table)
library(dplyr)
### Select data and parameters
inputs <- final_demand_inputs(yr = 2018,
scotland = FALSE,
elasticity = "meng14")
### Simulate a policy
policy_sim <- simulate_alcohol_policy(data = inputs,
alc.policy = "exog",
on.trade.ch = rep(-0.1,5),
off.trade.ch = rep(0,5),
reallocate = FALSE,
prob = FALSE)
policy_sim_re <- simulate_alcohol_policy(data = inputs,
alc.policy = "exog",
on.trade.ch = rep(-0.1,5),
off.trade.ch = rep(0,5),
reallocate = TRUE,
prob = FALSE)
### Extract the multipliers
multipliers <- multipliers(yr = 2018,
empl = "fte")
### Output effects
output.effects.1 <- round(sum(policy_sim*multipliers[,"output.multipliers.type1"]),3)
output.effects.2 <- round(sum(policy_sim*multipliers[,"output.multipliers.type2"]),3)
output.effects.1 <- round(sum(policy_sim_re*multipliers[,"output.multipliers.type1"]),3)
output.effects.2 <- round(sum(policy_sim_re*multipliers[,"output.multipliers.type2"]),3)
output.effects.1 <- round(sum(policy_sim*multipliers[,"output.multipliers.type1"]),3)
output.effects.2 <- round(sum(policy_sim*multipliers[,"output.multipliers.type2"]),3)
