library(data.table)
library(magrittr)
minyr <- 2010
maxyr <- 2020
############################
### LFS employment data ####
## NOTE: the file:
## data processing - employment data LFS fai.R
##
## must first be run to produce the data tobalciomodel::lfs_empl_fai
empl <- tobalciomodel::lfs_empl_fai
for (y in minyr:maxyr) {
temp <- empl[year %in% y,]
temp[1:3   , Industry := "Agriculture"]
temp[4:57  , Industry := "Production"]
temp[58    , Industry := "Construction"]
temp[59:71 , Industry := "Distribution, transport, hotels and restaurants"]
temp[72:76 , Industry := "Information and communication"]
temp[77:79 , Industry := "Finance and insurance"]
temp[80:81 , Industry := "Real estate"]
temp[82:95 , Industry := "Professional and support activities"]
temp[96:99 , Industry := "Government, education and health"]
temp[100:106 , Industry := "Other services"]
if (y == minyr) {
empl_data <- copy(temp)
} else {
empl_data <- rbindlist(list(empl_data, temp))
}
}
empl_data <- empl_data[, .(tot_emp = sum(tot_emp),
tot_fte = sum(tot_fte)),
by = c("year","Industry")]
###############################################
### GVA and output data from the blue book ####
# https://www.ons.gov.uk/economy/nationalaccounts/supplyandusetables/datasets/inputoutputsupplyandusetablessummarytables
minyr <- 1997
maxyr <- 2019
for (y in minyr:maxyr) {
yr <- as.character(y)
##### Output
out <- readxl::read_excel("data-raw/bb21a10summarytables.xlsx",
sheet = yr,
range = "C76:L76",
col_names = FALSE)
setDT(out)
setnames(out,
names(out),
c("Agriculture", "Production", "Construction",
"Distribution, transport, hotels and restaurants",
"Information and communication", "Finance and insurance",
"Real estate", "Professional and support activities",
"Government, education and health", "Other services"))
out <- melt(out,
variable.name = "Industry",
value.name = "output")
out[, year := y]
##### GVA
gva <- readxl::read_excel("data-raw/bb21a10summarytables.xlsx",
sheet = yr,
range = "C73:L73",
col_names = FALSE)
setDT(gva)
setnames(gva,
names(gva),
c("Agriculture", "Production", "Construction",
"Distribution, transport, hotels and restaurants",
"Information and communication", "Finance and insurance",
"Real estate", "Professional and support activities",
"Government, education and health", "Other services"))
gva <- melt(gva,
variable.name = "Industry",
value.name = "gva")
gva[, year := y]
#### merge
data <- merge(out, gva, by = c("year","Industry"), sort = F)
#### stack data
if (y == minyr) {
bb_data <- copy(data)
} else {
bb_data <- rbindlist(list(bb_data, data))
}
}
rm(data, out, gva)
macro_data <- merge(bb_data, empl_data, by = c("year","Industry"), sort = F)
usethis::use_data(macro_data, overwrite = TRUE)
roxygen2::roxygenise()
library(tobalciomodel)
library(tobalciomodel)
library(tobalciomodel)
roxygen2::roxygenise()
library(tobalciomodel)
library(tobalciomodel)
library(tobalciomodel)
library(tobalciomodel)
library(tobalciomodel)
library(tobalciomodel)
library(tobalciomodel)
roxygen2::roxygenise()
library(tobalciomodel)
library(tobalciomodel)
crayon::bgCyan(egg)
crayon::bgCyan("egg")
cat("\tdone\n")
cat(crayon::bgCyan("Input-Output Model Parameters:\n"))
cat(crayon::bgGreen("Simulating Wider Economy Effects:\n"))
cat(crayon::green("\tChange in Off-Trade Alcohol Demand:"))
cat(crayon::blue("Â£",hhold_exp[1],"million\n"))
cat(crayon::blue("\tChange in On-Trade Alcohol Demand:"))
cat(crayon::magenta("\t(1/5) Constructing Final Demand Vector:"))
cat(crayon::red("\t(1/5) Constructing Final Demand Vector:"))
help(package = tobalciomodel)
library(tobalciomodel)
?matrix
library(tobalciomodel)
usethis::use_version()
library(tobalciomodel)
library(tobalciomodel)
library(tobalciomodel)
roxygen2::roxygenise()
library(tobalciomodel)
library(tobalciomodel)
library(tobalciomodel)
library(tobalciomodel)
library(tobalciomodel)
library(tobalciomodel)
library(tobalciomodel)
usethis::use_version()
library(tobalciomodel)
library(tobalciomodel)
help(package = tobalciomodel)
data <- tobalciomodel::lfs_empl_fai
View(data)
library(lfsclean)
library(readxl)
library(data.table)
library(magrittr)
names(data)
data_wide <- dcast(data,
IOC + Sector ~ year,
value.var = c("tot_emp","tot_fte"))
View(data_wide)
?dcast
View(data)
wf <- read_excel("data-raw/UK_MainTables.Main.xlsm",
sheet = "Ind T1", range = "S4:S10")
View(wf)
perc_changes <- data.table(sec, wf)
sec <- c("Primary sector and utilities","Manufacturing","Construction",
"Trade, accomod and transport","Business and other servies","Non-marketed services")
perc_changes <- data.table(sec, wf)
View(perc_changes)
setnames(perc_changes, names(perc_changes), c("sec","change"))
View(perc_changes)
perc_changes[, change := 1 + change]
View(perc_changes)
wf <- read_excel("data-raw/UK_MainTables.Main.xlsm",
sheet = "Ind T1", range = "S4:S10")
sec <- c("Primary sector and utilities","Manufacturing","Construction",
"Trade, accomod and transport","Business and other servies","Non-marketed services")
perc_changes <- data.table(sec, wf)
setnames(perc_changes, names(perc_changes), c("sec","change"))
View(perc_changes)
wf <- read_excel("data-raw/UK_MainTables.Main.xlsm",
sheet = "Ind T1", range = "S4:S10")
sec <- c("Primary sector and utilities","Manufacturing","Construction",
"Trade, accomod and transport","Business and other servies","Non-marketed services")
perc_changes <- data.table(sec, wf)
setnames(perc_changes, names(perc_changes), c("sec","change"))
perc_changes[, prop_change := 1 + (change/100)]
View(perc_changes)
View(data_wide)
View(data)
rm(data_wide )
start_year <- max(data$year) + 1
y <- 2021
t <- y - 1
curr_year <- data[year == t,]
View(curr_year)
curr_year[c(1:7,52:57), sec := "Primary sector and utilities"]
View(curr_year)
wf <- read_excel("data-raw/UK_MainTables.Main.xlsm",
sheet = "Ind T1", range = "S4:S10")
sec <- c("Primary sector and utilities","Manufacturing","Construction",
"Trade, accomod and transport","Business and other services","Non-marketed services")
perc_changes <- data.table(sec, wf)
setnames(perc_changes, names(perc_changes), c("sec","change"))
perc_changes[, prop_change := 1 + (change/100)]
curr_year[c(1:7,52:57), sec := "Primary sector and utilities"]
curr_year[8:51, sec := "Manufacturing"]
curr_year[58, sec := "Construction"]
curr_year[59:71, sec := "Trade, accomod and transport"]
curr_year[c(72:95,100:106), sec := "Business and other services"]
curr_year[96:99, sec := "Non-marketed services"]
View(curr_year)
update <- merge(curr_year, wf, by = "sec", sort = FALSE, all = TRUE)
update <- merge(curr_year, perc_changes, by = "sec", sort = FALSE, all = TRUE)
View(update)
update[, tot_emp := tot_emp * prop_change]
update[, tot_fte := tot_fte * prop_change]
update[, year := year + 1]
View(update)
names(update)
names(data)
update[, c("sec","change","prop_change") := NULL]
names(update)
start_year <- max(data$year) + 1
for (y in start_year:2027){
t <- y - 1
curr_year <- data[year == t,]
curr_year[c(1:7,52:57), sec := "Primary sector and utilities"]
curr_year[8:51, sec := "Manufacturing"]
curr_year[58, sec := "Construction"]
curr_year[59:71, sec := "Trade, accomod and transport"]
curr_year[c(72:95,100:106), sec := "Business and other services"]
curr_year[96:99, sec := "Non-marketed services"]
update <- merge(curr_year, perc_changes, by = "sec", sort = FALSE, all = TRUE)
update[, tot_emp := tot_emp * prop_change]
update[, tot_fte := tot_fte * prop_change]
update[, year := year + 1]
update[, c("sec","change","prop_change") := NULL]
data <- rbindlist(list(data, update))
}
View(data)
1908/106
lfs_empl_fai <- copy(data)
usethis::use_data(lfs_empl_fai,overwrite = TRUE)
roxygen2::roxygenise()
library(tobalciomodel)
help(package = tobalciomodel)
roxygen2::roxygenise()
library(tobalciomodel)
roxygen2::roxygenise()
roxygen2::roxygenise()
library(tobalciomodel)
help(package = tobalciomodel)
rm(list = ls())
data <- tobalciomodel::lfs_empl_cpa
wf <- read_excel("data-raw/UK_MainTables.Main.xlsm",
sheet = "Ind T1", range = "S4:S10")
sec <- c("Primary sector and utilities","Manufacturing","Construction",
"Trade, accomod and transport","Business and other services","Non-marketed services")
perc_changes <- data.table(sec, wf)
setnames(perc_changes, names(perc_changes), c("sec","change"))
perc_changes[, prop_change := 1 + (change/100)]
start_year <- max(data$year) + 1
t <- y - 1
curr_year <- data[year == t,]
y <- 2021
t <- y - 1
curr_year <- data[year == t,]
View(curr_year)
for (y in start_year:2027){
t <- y - 1
curr_year <- data[year == t,]
curr_year[c(1:7,51:56), sec := "Primary sector and utilities"]
curr_year[8:50, sec := "Manufacturing"]
curr_year[57, sec := "Construction"]
curr_year[58:68, sec := "Trade, accomod and transport"]
curr_year[c(69:93,98:105), sec := "Business and other services"]
curr_year[94:97, sec := "Non-marketed services"]
update <- merge(curr_year, perc_changes, by = "sec", sort = FALSE, all = TRUE)
update[, tot_emp := tot_emp * prop_change]
update[, tot_fte := tot_fte * prop_change]
update[, year := year + 1]
update[, c("sec","change","prop_change") := NULL]
data <- rbindlist(list(data, update))
}
lfs_empl_cpa <- copy(data)
usethis::use_data(lfs_empl_cpa,overwrite = TRUE)
View(data)
1890/105
roxygen2::roxygenise()
library(tobalciomodel)
roxygen2::roxygenise()
fte = TRUE
FAI = TRUE
year_sut = 2018
### No supply table
### io table
iotable <- as.matrix(tobalciomodel::iotable_fai[,3:108])
### coefficients
gva.total <- as.vector(as.matrix(tobalciomodel::iotable_fai[,"gva.total"]))
gva.taxes <- as.vector(as.matrix(tobalciomodel::iotable_fai[,"gva.taxes"]))
gva.gos   <- as.vector(as.matrix(tobalciomodel::iotable_fai[,"gva.gos"]))
gva.wages <- as.vector(as.matrix(tobalciomodel::iotable_fai[,"gva.wages"]))
total.output <- as.vector(as.matrix(tobalciomodel::iotable_fai[,"total.output"]))
### FAI table is based on 2010, so employment figures used for constructing the
### employment coefficient needs to be taken from 2010.
### Need the model years employment figures for calculating % changes later
if (fte == TRUE) {
employment <- tobalciomodel::lfs_empl_fai[year == y, "tot_fte"]
employment_2010 <- tobalciomodel::lfs_empl_fai[year == 2010, "tot_fte"]
} else {
employment <- tobalciomodel::lfs_empl_fai[year == y, "tot_emp"]
employment_2010 <- tobalciomodel::lfs_empl_fai[year == 2010, "tot_emp"]
}
employment <- as.vector(as.matrix(employment))
gva <- data.table(tobalciomodel::iotable_fai$IOC,
tobalciomodel::iotable_fai$Sector,
total.output,
gva.total/total.output,
gva.taxes/total.output,
gva.gos/total.output,
gva.wages/total.output,
employment,
employment_2010/total.output)
setnames(gva, names(gva), c("IOC","Sector","output",
"gva_coef","tax_coef","gos_coef","coe_coef","employment","empl_coef"))
list <- list(iotable = iotable,
coefs = gva)
## extract objects from list
iotable <- list$iotable
coefs   <- list$coefs
supply  <- list$supply
if (FAI == TRUE) {
supply <- tobalciomodel::iotable_fai[,c("IOC","Sector")]
setnames
}
total.output <- as.vector(as.matrix(coefs[,"output"]))
View(coefs)
## extract objects from list
iotable <- list$iotable
coefs   <- list$coefs
supply  <- list$supply
if (FAI == TRUE) {
supply <- tobalciomodel::iotable_fai[,c("IOC","Sector")]
#setnames
}
total.output <- as.vector(as.matrix(coefs[,"output"]))
##############################
### Leontief Type 1 ##########
## A matrix
A <- iotable %*% ((total.output )^-1 * diag(length(total.output)))
## Leontief Inverse L = (I - A)^-1
L1 <- solve(diag(length(total.output)) - A)
##############################
### Leontief Type 2 ##########
## Internalise househholds within the IO table
if (FAI == TRUE) {
data <- tobalciomodel::iotable_fai
}
cons <- as.vector(as.matrix(data[,"hhold.demand"]))
coe <- as.vector(as.matrix(data[,"hhold.output"]))
coe <- c(coe , 0)
iotable2 <- cbind(rbind(iotable,cons) , coe)
total.output2 <- c(total.output, sum(coe))
rm(coe, cons, data)
## A matrix
A2 <- iotable2 %*% ((total.output2 )^-1 * diag(length(total.output2)))
## Leontief Inverse L = (I - A)^-1
L2 <- solve(diag(length(total.output2)) - A2)
### OUTPUT MULTIPLIERS
output.type0 <- rep(1,length(total.output))
output.type1 <- rep(NA,length(total.output))
output.type2 <- rep(NA,length(total.output))
for (i in 1:length(total.output)) {
output.type1[i] <- sum(L1[,i])
output.type2[i] <- sum(L2[,i])
}
coef.gva <- as.vector(as.matrix(coefs[,"gva_coef"]))
coef.tax <- as.vector(as.matrix(coefs[,"tax_coef"]))
coef.coe <- as.vector(as.matrix(coefs[,"coe_coef"]))
coef.gos <- as.vector(as.matrix(coefs[,"gos_coef"]))
### Type 0
gva.type0 <- coef.gva
tax.type0 <- coef.tax
coe.type0 <- coef.coe
gos.type0 <- coef.gos
### Type 1
gva.type1 <- as.vector(coef.gva %*% L1 )
coe.type1 <- as.vector(coef.coe %*% L1 )
gos.type1 <- as.vector(coef.gos %*% L1 )
tax.type1 <- as.vector(coef.tax %*% L1 )
coef.gva2 <- c(coef.gva, 0)
coef.tax2 <- c(coef.tax, 0)
coef.coe2 <- c(coef.coe, 0)
coef.gos2 <- c(coef.gos, 0)
gva.type2 <- as.vector(coef.gva2 %*% L2 )
coe.type2 <- as.vector(coef.coe2 %*% L2 )
gos.type2 <- as.vector(coef.gos2 %*% L2 )
tax.type2 <- as.vector(coef.tax2 %*% L2 )
coef.emp <- as.vector(as.matrix(coefs[,"empl_coef"]))
emp.type0 <- coef.emp
emp.type1 <- as.vector(coef.emp %*% L1)
coef.emp2 <- c(coef.emp, 0)
emp.type2 <- as.vector(coef.emp2 %*% L2)
gva.type2 <- gva.type2[1:length(gva.type1)]
roxygen2::roxygenise()
L0 <- diag(nrow(length(total.output)))
length(total.output)
L0
L0 <- diag(length(total.output))
L0
roxygen2::roxygenise()
multipliers <- data.table(supply,
output.type0, output.type1, output.type2,
emp.type0, emp.type1, emp.type2,
gva.type0, gva.type1, gva.type2,
coe.type0, coe.type1, coe.type2,
gos.type0, gos.type1, gos.type2)
warnings()
### OUTPUT MULTIPLIERS
output.type0 <- rep(1,length(total.output))
output.type1 <- rep(NA,length(total.output))
output.type2 <- rep(NA,length(total.output))
for (i in 1:length(total.output)) {
output.type1[i] <- sum(L1[,i])
output.type2[i] <- sum(L2[,i])
}
#######################
### GVA MULTIPLIERS
coef.gva <- as.vector(as.matrix(coefs[,"gva_coef"]))
coef.tax <- as.vector(as.matrix(coefs[,"tax_coef"]))
coef.coe <- as.vector(as.matrix(coefs[,"coe_coef"]))
coef.gos <- as.vector(as.matrix(coefs[,"gos_coef"]))
### Type 0
gva.type0 <- coef.gva
tax.type0 <- coef.tax
coe.type0 <- coef.coe
gos.type0 <- coef.gos
### Type 1
gva.type1 <- as.vector(coef.gva %*% L1 )
coe.type1 <- as.vector(coef.coe %*% L1 )
gos.type1 <- as.vector(coef.gos %*% L1 )
tax.type1 <- as.vector(coef.tax %*% L1 )
### Type 2
coef.gva2 <- c(coef.gva, 0)
coef.tax2 <- c(coef.tax, 0)
coef.coe2 <- c(coef.coe, 0)
coef.gos2 <- c(coef.gos, 0)
gva.type2 <- as.vector(coef.gva2 %*% L2 )
coe.type2 <- as.vector(coef.coe2 %*% L2 )
gos.type2 <- as.vector(coef.gos2 %*% L2 )
tax.type2 <- as.vector(coef.tax2 %*% L2 )
#################################
### EMPLOYMENT MULTIPLIERS
coef.emp <- as.vector(as.matrix(coefs[,"empl_coef"]))
emp.type0 <- coef.emp
emp.type1 <- as.vector(coef.emp %*% L1)
coef.emp2 <- c(coef.emp, 0)
emp.type2 <- as.vector(coef.emp2 %*% L2)
####### Trim the type 2 vectors to remove the household sector (which by assumption
####### will always have a zero effect by the multiplier method anyway)
gva.type2 <- gva.type2[1:length(gva.type1)]
coe.type2 <- coe.type2[1:length(coe.type1)]
gos.type2 <- gos.type2[1:length(gos.type1)]
tax.type2 <- tax.type2[1:length(tax.type1)]
emp.type2 <- emp.type2[1:length(emp.type1)]
## (note that the method of getting multipliers for GVA and employment is consistent with the
## output multiplier method i.e. summing up the columns of L1 is equivalent to multiplying L1
## by a vector of 1s - such a vector would be the output coefficients i.e. output/output = 1)
multipliers <- data.table(supply,
output.type0, output.type1, output.type2,
emp.type0, emp.type1, emp.type2,
gva.type0, gva.type1, gva.type2,
coe.type0, coe.type1, coe.type2,
gos.type0, gos.type1, gos.type2)
leontief <- list(multipliers = multipliers,
leontief0 = L0,
leontief1 = L1,
leontief2 = L2)
yr <- copy(year)
## vector of annual earnings by sector based on choice of IO tables
if (FAI == TRUE) {
earnings_data <- tobalciomodel::ashe_earn_fai[year == yr,]
} else if (FAI == FALSE) {
earnings_data <- tobalciomodel::ashe_earn_cpa[year == yr,]
}
## extract multipliers and final demand vectors from inputs
multipliers <- leontief$multipliers
L2 <- leontief$leontief2
L1 <- leontief$leontief1
L0 <- leontief$leontief0
f  <- as.vector(as.matrix(fdemand[,"final_demand"]))
f2 <- c(f, 0)
#### Calculate economic effects here - using both the "p" and "m" methods
#### p -> "product" method - matrix multiplication.
#### m -> "multiplier" method - use the multipliers.
#### Both methods will yield the same aggregate economic effects, but the interpretation
#### of the calculations at the sector level have different interpretations:
#### "p method" - the economic impact of all changes in the economy ON the sector itself.
#### "m method" - the economic impact of changes in the sector ON THE ECONOMY AS A WHOLE.
####################################
### -------Output effects------- ###
####################################
# P-method
out_effects_t0_p <- as.vector(as.matrix(L0 %*% f))
out_effects_t1_p <- as.vector(as.matrix(L1 %*% f))
out_effects_t2_p <- as.vector(as.matrix(L2 %*% f2))
# M-method
out_effects_t0_m <- f*multipliers$output.type0
out_effects_t1_m <- f*multipliers$output.type1
out_effects_t2_m <- f2*multipliers$output.type2
FAI = TRUE
fdemand <- c(rep(0,105),1000)
yr <- copy(year)
## vector of annual earnings by sector based on choice of IO tables
if (FAI == TRUE) {
earnings_data <- tobalciomodel::ashe_earn_fai[year == yr,]
} else if (FAI == FALSE) {
earnings_data <- tobalciomodel::ashe_earn_cpa[year == yr,]
}
## extract multipliers and final demand vectors from inputs
multipliers <- leontief$multipliers
L2 <- leontief$leontief2
L1 <- leontief$leontief1
L0 <- leontief$leontief0
f  <- as.vector(as.matrix(fdemand[,"final_demand"]))
f2 <- c(f, 0)
library(tobalciomodel)
library(tobalciomodel)
roxygen2::roxygenise()
