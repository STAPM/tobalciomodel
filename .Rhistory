} else if (elasticity == "collis10") {
elasticity_data <- elasticity_data[Source == "Collis et al. 2010",]
}
final_demand_inputs()
library(data.table)
final_demand_inputs()
library(tobalciomodel)
library(tobalciomodel)
final_demand_inputs()
names(elasticities)
devtools::load_all()
final_demand_inputs()
elasticities
devtools::load_all()
final_demand_inputs()
elasticity_data <- as.data.table(tobalciomodel::elasticities)
if (elasticity == "meng14") {
elasticity_data <- elasticity_data[1:5,]
} else if (elasticity == "collis10") {
elasticity_data <- elasticity_data[6:10,]
}
View(elasticity_data)
if (elasticity == "meng14") {
elasticity_data[1:5,]
} else if (elasticity == "collis10") {
elasticity_data[6:10,]
}
devtools::load_all()
final_demand_inputs()
devtools::load_all()
final_demand_inputs()
sticities data based on chosen source
elasticity_data <- as.data.table(tobalciomodel::elasticities)
if (elasticity == "meng14") {
elasticity_data[1:5,]
} else if (elasticity == "collis10") {
elasticity_data[6:10,]
}
## Filter the MESAS data by year and country
mesas_data <- as.data.table(tobalciomodel::mesas)
if (scotland == FALSE) {
mesas_data <- mesas_data[year %in% yr & country == "England & Wales",]
} else if (scotland == TRUE) {
mesas_data <- mesas_data[year %in% yr & country == "Scotland",]
}
mesas_data <- mesas_data[product %in% c("Beer","Cider","Wine","Spirits","RTDs"),]
library(data.table)
final_demand_inputs()
devtools::load_all(".")
library(data.table)
final_demand_inputs()
devtools::load_all(".")
final_demand_inputs()
devtools::load_all(".")
final_demand_inputs()
devtools::load_all(".")
final_demand_inputs()
devtools::load_all()
final_demand_inputs()
devtools::load_all(".")
final_demand_inputs()
mesas_data <- as.data.table(tobalciomodel::mesas)
summary(mesas_data)
mesas_data <- as.data.table(tobalciomodel::mesas)
if (scotland == FALSE) {
mesas_data <- mesas_data[year == yr & country == "England & Wales",]
} else if (scotland == TRUE) {
#mesas_data <- mesas_data[year == yr & country == "Scotland",]
}
#mesas_data <- mesas_data[product %in% c("Beer","Cider","Wine","Spirits","RTDs"),]
devtools::load_all()
final_demand_inputs()
library(dplyr)
final_demand_inputs()
devtools::load_all(".")
final_demand_inputs()
devtools::load_all(".")
final_demand_inputs()
mesas_data
mesas
mesas_data <- mesas_data[product %in% c("Beer","Cider","Wine","Spirits","RTDs"),]
devtools::load_all(".")
rm(list = ls())
final_demand_inputs()
data <- final_demand_inputs()
data
devtools::load_all(".")
data <- final_demand_inputs()
devtools::load_all()
devtools::load_all()
data <- final_demand_inputs()
data
data <- final_demand_inpits(2015,TRUE,"collis10")
data <- final_demand_inputs(2015,TRUE,"collis10")
data
data <- final_demand_inputs(2015,FALSE,"collis10")
data
devtools::load_all()
library(tobalciomodel)
data <- final_demand_inputs()
library(data.table)
data <- final_demand_inputs()
library(dplyr)
data <- final_demand_inputs()
data
on.trade <- rep(-0.1,5)
on.trade.ch <- rep(-0.1,5)
data <- data.frame(data,on.trade.ch)
View(data)
data <- final_demand_inputs()
off.trade.ch = c(0,0,0,0,0)
data <- data.frame(data,on.trade.ch,off.trade.ch)
data2 <- data %>%
dplyr::mutate(Q.change.on = Consumption.On*on.trade.ch) %>%
dplyr::mutate(Q.Change.off = Consumption.Off*off.trade.ch)
data2
data <- data.frame(data,on.trade.ch,off.trade.ch)
data2 <- data %>%
dplyr::mutate(Q.Change.on = Consumption.On*on.trade.ch) %>%
dplyr::mutate(Q.Change.off = Consumption.Off*off.trade.ch) %>%
dplyr::mutate(C.Change.on = Q.Change.on*Price.On) %>%
dplyr::mutate(C.Change.off = Q.Change.off*Price.Off)
}
data2 <- data %>%
dplyr::mutate(Q.Change.on = Consumption.On*on.trade.ch) %>%
dplyr::mutate(Q.Change.off = Consumption.Off*off.trade.ch) %>%
dplyr::mutate(C.Change.on = Q.Change.on*Price.On) %>%
dplyr::mutate(C.Change.off = Q.Change.off*Price.Off)
View(data2)
data2 <- data %>%
dplyr::mutate(Q.Change.on = Consumption.On*on.trade.ch) %>%
dplyr::mutate(Q.Change.off = Consumption.Off*off.trade.ch) %>%
dplyr::mutate(C.Change.on = Q.Change.on*Price.On) %>%
dplyr::mutate(C.Change.off = Q.Change.off*Price.Off) %>%
dplyr::select(C.change.on,C.Change.off)
data2 <- data %>%
dplyr::mutate(Q.Change.on = Consumption.On*on.trade.ch) %>%
dplyr::mutate(Q.Change.off = Consumption.Off*off.trade.ch) %>%
dplyr::mutate(C.Change.on = Q.Change.on*Price.On) %>%
dplyr::mutate(C.Change.off = Q.Change.off*Price.Off) %>%
dplyr::select(C.Change.on,C.Change.off)
View(data2)
data2 <- data %>%
dplyr::mutate(Q.Change.on = Consumption.On*on.trade.ch) %>%
dplyr::mutate(Q.Change.off = Consumption.Off*off.trade.ch) %>%
dplyr::mutate(C.Change.on = Q.Change.on*Price.On) %>%
dplyr::mutate(C.Change.off = Q.Change.off*Price.Off) %>%
dplyr::select(C.Change.on,C.Change.off) %>%
dplyr::mutate(tot.change.on = sum(C.Change.on)) %>%
dplyr::mutate(tot.change.off = sum(C.Change.off))
View(data2)
final.demand <- rep(0,106)
data2 <- data %>%
dplyr::mutate(Q.Change.on = Consumption.On*on.trade.ch) %>%
dplyr::mutate(Q.Change.off = Consumption.Off*off.trade.ch) %>%
dplyr::mutate(C.Change.on = Q.Change.on*Price.On) %>%
dplyr::mutate(C.Change.off = Q.Change.off*Price.Off) %>%
dplyr::select(C.Change.on,C.Change.off) %>%
dplyr::mutate(tot.change.on = sum(C.Change.on)) %>%
dplyr::mutate(tot.change.off = sum(C.Change.off)) %>%
dplyr::select(tot.change.on,tot.change.off) %>%
dplyr::distinct()
View(data2)
data2 <- as.matrix(data2)
data2
data2 <- as.matrix(as.vector(data2))
data2
data2 <- data %>%
dplyr::mutate(Q.Change.on = Consumption.On*on.trade.ch) %>%
dplyr::mutate(Q.Change.off = Consumption.Off*off.trade.ch) %>%
dplyr::mutate(C.Change.on = Q.Change.on*Price.On) %>%
dplyr::mutate(C.Change.off = Q.Change.off*Price.Off) %>%
dplyr::select(C.Change.on,C.Change.off) %>%
dplyr::mutate(tot.change.on = sum(C.Change.on)) %>%
dplyr::mutate(tot.change.off = sum(C.Change.off)) %>%
dplyr::select(tot.change.on,tot.change.off) %>%
dplyr::distinct()
data2 <- as.vector(as.matrix(data2))
data2
# off-trade changes goes into sector 62 - Wholesale Trade (Alcohol)
final.demand[62] <- data2[2]
# on-trade changes equally split between 70 - Accommodation (Alcohol) and 72 - Food and Beverage (Alcohol)
final.demand[70] <- data2[1]*0.5
final.demand[72] <- data2[1]*0.5
final.demand
devtools::document()
library(tobalciomodel)
data <- final_demand_inputs()
ch.demand <- simulate_alcohol_policy(data = data,
alc.policy = "exog",
on.trade.ch = rep(-0.1,5),
off.trade.ch = c(0,0,0,0,0),
reallocate = FALSE)
ch.demand
data <- tobalciomodel::iotable
flowtable <- as.matrix(data[,grep("^[sec]", names(data), value=TRUE)])
total.output <- as.vector(as.matrix(data[,"total.output"]))
hhold.demand <- as.vector(as.matrix(data[,"hhold.demand"]))
hhold.output <- as.vector(as.matrix(data[,"hhold.output"]))
## extract flow table and output/demand vectors
flowtable <- as.matrix(data[,grep("^[sec]", names(data), value=TRUE)])
total.output <- as.vector(as.matrix(data[,"total.output"]))
hhold.demand <- as.vector(as.matrix(data[,"hhold.demand"]))
hhold.output <- as.vector(as.matrix(data[,"hhold.output"]))
### Create the type 1 matrix
## Calculate coefficient matrix:
A <- flowtable %*% ((total.output )^-1 * diag(length(total.output)))
# Show A
# Identity matrix minus A
IminusA <- diag(length(total.output)) - A
# Calculate the Leontief Inverse matrix
L <- solve(IminusA)
## Create the type 2 matrix - endoegenous households
# create a new flowtable - add the employee output/compensation as an extra row and household demand as an extra columns
# the household-household transfer on the lead diagonal should be zero (households do not supply/demand from/to each other directly)
# in calculating A, the household consumption column is a fraction of total household
# income - total employee compensation plus total gross operating surplus
total.hhold.demand <- 801796 + 504498
flow.table2 <- rbind(flowtable,hhold.output)        # add employment earnings as an extra row
flow.table2 <- cbind(flow.table2,c(hhold.demand,0))  # add household spending as an extra column (0 for no inter-household purchases)
## Calculate coefficient matrix:
A2 <- flow.table2 %*% (( c(total.output,sum(total.hhold.demand)) )^-1 * diag(length( c(total.output,sum(total.hhold.demand))  ) ) )
# Identity matrix minus A
IminusA2 <- diag(length(c(total.output,sum(total.output)))) - A2
# Calculate the Leontief Inverse matrix
L2 <- solve(IminusA2)
L1
L
names(iotable)
### read in the flow table and other IO table elements into an R data file
library(readxl)
library(data.table)
### Read in the sector names
sector <- read_excel(path = paste0("data-raw/","2010_UK_Alcohol_consumption_disaggregated_IxI",".xlsx"),
sheet = "Sheet1",
range = "C6:C111",
col_names = FALSE)
### Read in the flowtable
flowtable <- read_excel(path = paste0("data-raw/","2010_UK_Alcohol_consumption_disaggregated_IxI",".xlsx"),
range = "D6:DE111",
col_names = FALSE)
### Read in the household consumption/demand and output rows
hhold.output <- read_excel(path = paste0("data-raw/","2010_UK_Alcohol_consumption_disaggregated_IxI",".xlsx"),
range = "D117:DE117",
col_names = FALSE)
hhold.demand <- read_excel(path = paste0("data-raw/","2010_UK_Alcohol_consumption_disaggregated_IxI",".xlsx"),
range = "DG6:DG111",
col_names = FALSE)
### Read in the final demand and total output
total.output <- read_excel(path = paste0("data-raw/","2010_UK_Alcohol_consumption_disaggregated_IxI",".xlsx"),
range = "D120:DE120",
col_names = FALSE)
final.demand <- read_excel(path = paste0("data-raw/","2010_UK_Alcohol_consumption_disaggregated_IxI",".xlsx"),
range = "DS6:DS111",
col_names = FALSE)
total.demand <- read_excel(path = paste0("data-raw/","2010_UK_Alcohol_consumption_disaggregated_IxI",".xlsx"),
range = "DT6:DT111",
col_names = FALSE)
gva.taxes <- read_excel(path = paste0("data-raw/","2010_UK_Alcohol_consumption_disaggregated_IxI",".xlsx"),
range = "D116:DE116",
col_names = FALSE)
gva.wages <- read_excel(path = paste0("data-raw/","2010_UK_Alcohol_consumption_disaggregated_IxI",".xlsx"),
range = "D117:DE117",
col_names = FALSE)
gva.profit <- read_excel(path = paste0("data-raw/","2010_UK_Alcohol_consumption_disaggregated_IxI",".xlsx"),
range = "D118:DE118",
col_names = FALSE)
gva.total <- read_excel(path = paste0("data-raw/","2010_UK_Alcohol_consumption_disaggregated_IxI",".xlsx"),
range = "D119:DE119",
col_names = FALSE)
rm(list = ls())
### read in the flow table and other IO table elements into an R data file
library(readxl)
library(data.table)
### Read in the sector names
sector <- read_excel(path = paste0("data-raw/","2010_UK_Alcohol_consumption_disaggregated_IxI",".xlsx"),
sheet = "Sheet1",
range = "C6:C111",
col_names = FALSE)
### Read in the flowtable
flowtable <- read_excel(path = paste0("data-raw/","2010_UK_Alcohol_consumption_disaggregated_IxI",".xlsx"),
range = "D6:DE111",
col_names = FALSE)
### Read in the household consumption/demand and output rows
hhold.output <- read_excel(path = paste0("data-raw/","2010_UK_Alcohol_consumption_disaggregated_IxI",".xlsx"),
range = "D117:DE117",
col_names = FALSE)
hhold.demand <- read_excel(path = paste0("data-raw/","2010_UK_Alcohol_consumption_disaggregated_IxI",".xlsx"),
range = "DG6:DG111",
col_names = FALSE)
### Read in the final demand and total output
total.output <- read_excel(path = paste0("data-raw/","2010_UK_Alcohol_consumption_disaggregated_IxI",".xlsx"),
range = "D120:DE120",
col_names = FALSE)
final.demand <- read_excel(path = paste0("data-raw/","2010_UK_Alcohol_consumption_disaggregated_IxI",".xlsx"),
range = "DS6:DS111",
col_names = FALSE)
total.demand <- read_excel(path = paste0("data-raw/","2010_UK_Alcohol_consumption_disaggregated_IxI",".xlsx"),
range = "DT6:DT111",
col_names = FALSE)
gva.taxes <- read_excel(path = paste0("data-raw/","2010_UK_Alcohol_consumption_disaggregated_IxI",".xlsx"),
range = "D116:DE116",
col_names = FALSE)
gva.wages <- read_excel(path = paste0("data-raw/","2010_UK_Alcohol_consumption_disaggregated_IxI",".xlsx"),
range = "D117:DE117",
col_names = FALSE)
gva.profit <- read_excel(path = paste0("data-raw/","2010_UK_Alcohol_consumption_disaggregated_IxI",".xlsx"),
range = "D118:DE118",
col_names = FALSE)
gva.total <- read_excel(path = paste0("data-raw/","2010_UK_Alcohol_consumption_disaggregated_IxI",".xlsx"),
range = "D119:DE119",
col_names = FALSE)
flowtable <- as.matrix(flowtable)
total.demand <- as.matrix(total.demand)
final.demand <- as.matrix(final.demand)
hhold.demand <- as.matrix(hhold.demand)
total.output <- as.vector(as.matrix(total.output))
hhold.output <- as.vector(as.matrix(hhold.output))
gva.taxes <- as.vector(as.matrix(gva.taxes))
gva.wages <- as.vector(as.matrix(gva.wages))
gva.profit <- as.vector(as.matrix(gva.profit))
gva.total <- as.vector(as.matrix(gva.total))
name <- as.vector(as.matrix(sector))
gva.gos <- read_excel(path = paste0("data-raw/","2010_UK_Alcohol_consumption_disaggregated_IxI",".xlsx"),
range = "D118:DE118",
col_names = FALSE)
gva.total <- read_excel(path = paste0("data-raw/","2010_UK_Alcohol_consumption_disaggregated_IxI",".xlsx"),
range = "D119:DE119",
col_names = FALSE)
flowtable <- as.matrix(flowtable)
total.demand <- as.matrix(total.demand)
final.demand <- as.matrix(final.demand)
hhold.demand <- as.matrix(hhold.demand)
total.output <- as.vector(as.matrix(total.output))
hhold.output <- as.vector(as.matrix(hhold.output))
gva.taxes <- as.vector(as.matrix(gva.taxes))
gva.wages <- as.vector(as.matrix(gva.wages))
gva.gos   <- as.vector(as.matrix(gva.gos))
gva.total <- as.vector(as.matrix(gva.total))
name <- as.vector(as.matrix(sector))
data_iotable_fai <- data.frame(name,flowtable,hhold.demand,final.demand,hhold.output,total.output,total.demand,
gva.taxes,gva.wages,gva.gos,gva.total)
setnames(data_iotable_fai, old = names(data_iotable_fai), new = c("name",paste0("sec",c(1:106)),
"hhold.demand","final.demand",
"hhold.output","total.output","total.demand",
"gva.taxes","gva.wages","gva.gos","gva.total"))
iotable <- data_iotable_fai
usethis::use_data(iotable,overwrite=TRUE)
names(data_iotable_fai)
devtools::document()
rm(list = ls())
multiplier.gva <- tobalciomodel::iotable$gva.total / tobalciomodel::iotable$total.output
multiplier.tax <- tobalciomodel::iotable$gva.taxes / tobalciomodel::iotable$total.output
multiplier.coe <- tobalciomodel::iotable$gva.wages / tobalciomodel::iotable$total.output
multiplier.gos <- tobalciomodel::iotable$gva.gos   / tobalciomodel::iotable$total.output
## extract flow table and output/demand vectors
flowtable <- as.matrix(data[,grep("^[sec]", names(data), value=TRUE)])
total.output <- as.vector(as.matrix(data[,"total.output"]))
hhold.demand <- as.vector(as.matrix(data[,"hhold.demand"]))
hhold.output <- as.vector(as.matrix(data[,"hhold.output"]))
### Create the type 1 matrix
## Calculate coefficient matrix:
A <- flowtable %*% ((total.output )^-1 * diag(length(total.output)))
# Show A
# Identity matrix minus A
IminusA <- diag(length(total.output)) - A
# Calculate the Leontief Inverse matrix
L <- solve(IminusA)
## Create the type 2 matrix - endoegenous households
# create a new flowtable - add the employee output/compensation as an extra row and household demand as an extra columns
# the household-household transfer on the lead diagonal should be zero (households do not supply/demand from/to each other directly)
# in calculating A, the household consumption column is a fraction of total household
# income - total employee compensation plus total gross operating surplus
total.hhold.income <- 801796 + 504498
flow.table2 <- rbind(flowtable,hhold.output)        # add employment earnings as an extra row
flow.table2 <- cbind(flow.table2,c(hhold.demand,0))  # add household spending as an extra column (0 for no inter-household purchases)
## Calculate coefficient matrix:
A2 <- flow.table2 %*% (( c(total.output,total.hhold.income) )^-1 * diag(length( c(total.output,total.hhold.income)  ) ) )
# Identity matrix minus A
IminusA2 <- diag(length(c(total.output,sum(total.output)))) - A2
# Calculate the Leontief Inverse matrix
L2 <- solve(IminusA2)
data = tobalciomodel::iotable
flowtable <- as.matrix(data[,grep("^[sec]", names(data), value=TRUE)])
total.output <- as.vector(as.matrix(data[,"total.output"]))
hhold.demand <- as.vector(as.matrix(data[,"hhold.demand"]))
hhold.output <- as.vector(as.matrix(data[,"hhold.output"]))
### Create the type 1 matrix
## Calculate coefficient matrix:
A <- flowtable %*% ((total.output )^-1 * diag(length(total.output)))
# Show A
# Identity matrix minus A
IminusA <- diag(length(total.output)) - A
# Calculate the Leontief Inverse matrix
L <- solve(IminusA)
View(L)
multipliers.type1 <- rep(NA,106)
for (i in 1:106) {
multipliers.type1 <- sum(L[1:106,i])
}
multipliers.type1 <- rep(NA,106)
for (i in 1:106) {
multipliers.type1[i] <- sum(L[1:106,i])
}
summary(multipliers.type1)
multipliers.type1 <- rep(NA,106)
multipliers.type2 <- rep(NA,106)
for (i in 1:106) {
multipliers.type1[i] <- sum(L[1:106,i])
multipliers.type2[i] <- sum(L[1:107,i])
}
multipliers.type1 <- rep(NA,106)
multipliers.type2 <- rep(NA,106)
for (i in 1:106) {
multipliers.type1[i] <- sum(L[1:106,i])
multipliers.type2[i] <- sum(L2[1:107,i])
}
## extract flow table and output/demand vectors
flowtable <- as.matrix(data[,grep("^[sec]", names(data), value=TRUE)])
total.output <- as.vector(as.matrix(data[,"total.output"]))
hhold.demand <- as.vector(as.matrix(data[,"hhold.demand"]))
hhold.output <- as.vector(as.matrix(data[,"hhold.output"]))
### Create the type 1 matrix
## Calculate coefficient matrix:
A <- flowtable %*% ((total.output )^-1 * diag(length(total.output)))
# Show A
# Identity matrix minus A
IminusA <- diag(length(total.output)) - A
# Calculate the Leontief Inverse matrix
L <- solve(IminusA)
## Create the type 2 matrix - endoegenous households
# create a new flowtable - add the employee output/compensation as an extra row and household demand as an extra columns
# the household-household transfer on the lead diagonal should be zero (households do not supply/demand from/to each other directly)
# in calculating A, the household consumption column is a fraction of total household
# income - total employee compensation plus total gross operating surplus
total.hhold.income <- 801796 + 504498
flow.table2 <- rbind(flowtable,hhold.output)        # add employment earnings as an extra row
flow.table2 <- cbind(flow.table2,c(hhold.demand,0))  # add household spending as an extra column (0 for no inter-household purchases)
## Calculate coefficient matrix:
A2 <- flow.table2 %*% (( c(total.output,total.hhold.income) )^-1 * diag(length( c(total.output,total.hhold.income)  ) ) )
# Identity matrix minus A
IminusA2 <- diag(length(c(total.output,sum(total.output)))) - A2
# Calculate the Leontief Inverse matrix
L2 <- solve(IminusA2)
### Calculate Sectoral Multipliers
multipliers.type1 <- rep(NA,106)
multipliers.type2 <- rep(NA,106)
for (i in 1:106) {
multipliers.type1[i] <- sum(L[1:106,i])
multipliers.type2[i] <- sum(L2[1:107,i])
}
summary(multipliers.type2)
flowtable <- as.matrix(tobalciomodel::iotable[,grep("^[sec]", names(data), value=TRUE)])
total.output <- as.vector(as.matrix(tobalciomodel::iotable[,"total.output"]))
hhold.demand <- as.vector(as.matrix(tobalciomodel::iotable[,"hhold.demand"]))
hhold.output <- as.vector(as.matrix(tobalciomodel::iotable[,"hhold.output"]))
data <- cbind(tobalciomodel::iotable$name,output.multipliers.type1,output.multipliers.type2)
output.multipliers.type1 <- rep(NA,106)
output.multipliers.type2 <- rep(NA,106)
for (i in 1:106) {
output.multipliers.type1[i] <- sum(L[1:106,i])
output.multipliers.type2[i] <- sum(L2[1:107,i])
}
### Calculate Output to GVA coefficients (proportion of output comprised of each GVA measure)
coef.gva <- tobalciomodel::iotable$gva.total / tobalciomodel::iotable$total.output
coef.tax <- tobalciomodel::iotable$gva.taxes / tobalciomodel::iotable$total.output
coef.coe <- tobalciomodel::iotable$gva.wages / tobalciomodel::iotable$total.output
coef.gos <- tobalciomodel::iotable$gva.gos   / tobalciomodel::iotable$total.output
gva.multipliers.type1 <- coef.gva*output.multipliers.type1
tax.multipliers.type1 <- coef.tax*output.multipliers.type1
coe.multipliers.type1 <- coef.gva*output.multipliers.type1
gos.multipliers.type1 <- coef.gva*output.multipliers.type1
gva.multipliers.type2 <- coef.gva*output.multipliers.type2
tax.multipliers.type2 <- coef.tax*output.multipliers.type2
coe.multipliers.type2 <- coef.gva*output.multipliers.type2
gos.multipliers.type2 <- coef.gva*output.multipliers.type2
data <- cbind(tobalciomodel::iotable$name,output.multipliers.type1,output.multipliers.type2)
data
tobalciomodel::iotable$name
View(data)
View(data)
data <- cbind(tobalciomodel::iotable$name)
View(data)
data <- cbind(as.character(tobalciomodel::iotable$name))
View(data)
name <- as.character(tobalciomodel::iotable$name)
data <- cbind(name)
data <- cbind(name,output.multipliers.type1,output.multipliers.type2)
View(data)
data <- cbind(name,
output.multipliers.type1,output.multipliers.type2,
gva.multipliers.type1,gva.multipliers.type2,
tax.multipliers.type1,tax.multipliers.type2,
coe.multipliers.type1,coe.multipliers.type2,
gos.multipliers.type1,gos.multipliers.type2)
View(data)
rm(list=ls())
multipliers <- multipliers()
devtools::load_all(".")
multipliers <- multipliers()
## extract flow table and output/demand vectors
flowtable <- as.matrix(tobalciomodel::iotable[,grep("^[sec]", names(data), value=TRUE)])
total.output <- as.vector(as.matrix(tobalciomodel::iotable[,"total.output"]))
hhold.demand <- as.vector(as.matrix(tobalciomodel::iotable[,"hhold.demand"]))
hhold.output <- as.vector(as.matrix(tobalciomodel::iotable[,"hhold.output"]))
flowtable <- as.matrix(tobalciomodel::iotable[,grep("^[sec]", names(tobalciomodel::iotable), value=TRUE)])
devtools::load_all(".")
multipliers <- multipliers()
View(multipliers)
usethis::use_vignette(data,title="Description of Data Inputs")
usethis::use_vignette("data",title="Description of Data Inputs")
usethis::use_vignette("introduction",title="Using 'tobalciomodel' to Calculate Economic Impacts")
