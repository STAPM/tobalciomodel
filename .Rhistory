sec3_alc_fte <- as.numeric(fai_empl[70,"tot_fte"])
#### fill in the missing alcohol categories
## Wholesale/Retail
fai_empl[61, tot_emp :=  sec1_alc_emp*sec2_alc_prop]
fai_empl[60, tot_emp :=  sec1_alc_emp*(1-sec1_alc_prop)]
fai_empl[61, tot_fte :=  sec1_alc_fte*sec2_alc_prop]
fai_empl[60, tot_fte :=  sec1_alc_fte*(1-sec1_alc_prop)]
## Food and Beverage
fai_empl[69, tot_emp :=  sec2_alc_emp*sec2_alc_prop]
fai_empl[68, tot_emp :=  sec2_alc_emp*(1-sec2_alc_prop)]
fai_empl[69, tot_fte :=  sec2_alc_fte*sec2_alc_prop]
fai_empl[68, tot_fte :=  sec2_alc_fte*(1-sec2_alc_prop)]
## Food and Beverage
fai_empl[71, tot_emp :=  sec3_alc_emp*sec3_alc_prop]
fai_empl[70, tot_emp :=  sec3_alc_emp*(1-sec3_alc_prop)]
fai_empl[71, tot_fte :=  sec3_alc_fte*sec3_alc_prop]
fai_empl[70, tot_fte :=  sec3_alc_fte*(1-sec3_alc_prop)]
fai_empl[, year := y]
assign(paste("lfs_empl_fai",y,sep="."),fai_empl)
}
lfs_empl_fai <- rbindlist(list(lfs_empl_fai.2010,
lfs_empl_fai.2011,
lfs_empl_fai.2012,
lfs_empl_fai.2013,
lfs_empl_fai.2014,
lfs_empl_fai.2015,
lfs_empl_fai.2016,
lfs_empl_fai.2017,
lfs_empl_fai.2018,
lfs_empl_fai.2019,
lfs_empl_fai.2020))
########################################################################################
##### Map SIC Employment onto the FAI categories for the alcohol-disaggregated table ###
## read in the SIC - FAI mapping sheet
map <- readxl::read_excel("data-raw/FAI SIC mapping.xlsx",
range = "A1:D612",
col_names = TRUE)
setDT(map)
map[, SIC_code := as.numeric(SIC_code)]
## read in FAI sectors and get output proportions
sectors <- readxl::read_excel("data-raw/2010_UK_Alcohol_consumption_disaggregated_IxI.xlsx",
range = "B5:C111")
setDT(sectors)
setnames(sectors, names(sectors), c("IOC","Sector"))
output <- readxl::read_excel("data-raw/2010_UK_Alcohol_consumption_disaggregated_IxI.xlsx",
range = "D120:DE120",
col_names = FALSE)
output <- as.vector(as.matrix(output))
output <- cbind(sectors,output)
sec1_alc_prop <- as.numeric(output[61,"output"]/(output[60,"output"] + output[61,"output"]))
sec2_alc_prop <- as.numeric(output[69,"output"]/(output[68,"output"] + output[69,"output"]))
sec3_alc_prop <- as.numeric(output[71,"output"]/(output[70,"output"] + output[71,"output"]))
rm(output)
## loop over years
for (y in 2010:2020) {
empl <- data[year == y,]
## map onto the FAI categories
merge <- merge.data.table(map, empl, by = "SIC_code", all.x = TRUE)
merge[is.na(total), total := 0]
merge[is.na(fte), fte := 0]
merge[, tot_emp := sum(total, na.rm=TRUE), by = "IOC"]
merge[, tot_fte := sum(fte, na.rm=TRUE)  , by = "IOC"]
merge <- unique(merge[,c("IOC","Sector","tot_emp","tot_fte")])
### need to create the 3 disaggregated alcohol sectors.
### apportion employment in line with the output ratio between the
### alcohol and non-alcohol sectors
fai_empl <- merge.data.table(sectors, merge, by = c("IOC","Sector"), all.x = TRUE, sort = FALSE)
sec1_alc_emp <- as.numeric(fai_empl[60,"tot_emp"])
sec2_alc_emp <- as.numeric(fai_empl[68,"tot_emp"])
sec3_alc_emp <- as.numeric(fai_empl[70,"tot_emp"])
sec1_alc_fte <- as.numeric(fai_empl[60,"tot_fte"])
sec2_alc_fte <- as.numeric(fai_empl[68,"tot_fte"])
sec3_alc_fte <- as.numeric(fai_empl[70,"tot_fte"])
#### fill in the missing alcohol categories
## Wholesale/Retail
fai_empl[61, tot_emp :=  sec1_alc_emp*sec2_alc_prop]
fai_empl[60, tot_emp :=  sec1_alc_emp*(1-sec1_alc_prop)]
fai_empl[61, tot_fte :=  sec1_alc_fte*sec2_alc_prop]
fai_empl[60, tot_fte :=  sec1_alc_fte*(1-sec1_alc_prop)]
## Food and Beverage
fai_empl[69, tot_emp :=  sec2_alc_emp*sec2_alc_prop]
fai_empl[68, tot_emp :=  sec2_alc_emp*(1-sec2_alc_prop)]
fai_empl[69, tot_fte :=  sec2_alc_fte*sec2_alc_prop]
fai_empl[68, tot_fte :=  sec2_alc_fte*(1-sec2_alc_prop)]
## Food and Beverage
fai_empl[71, tot_emp :=  sec3_alc_emp*sec3_alc_prop]
fai_empl[70, tot_emp :=  sec3_alc_emp*(1-sec3_alc_prop)]
fai_empl[71, tot_fte :=  sec3_alc_fte*sec3_alc_prop]
fai_empl[70, tot_fte :=  sec3_alc_fte*(1-sec3_alc_prop)]
fai_empl[, year := y]
assign(paste("lfs_empl_fai",y,sep="."),fai_empl)
}
lfs_empl_fai <- rbindlist(list(lfs_empl_fai.2010,
lfs_empl_fai.2011,
lfs_empl_fai.2012,
lfs_empl_fai.2013,
lfs_empl_fai.2014,
lfs_empl_fai.2015,
lfs_empl_fai.2016,
lfs_empl_fai.2017,
lfs_empl_fai.2018,
lfs_empl_fai.2019,
lfs_empl_fai.2020))
usethis::use_data(lfs_empl_fai,overwrite = TRUE)
library(lfsclean)
library(readxl)
library(data.table)
library(magrittr)
### LFS employment data
## construct 4-digit employment by industry-year from the Labour Force Survey
root <- "D:/"
file <- "Datasets/Labour Force Survey/raw data/"
vars <- c("year","quarter","pwt","age","gender","lmstatus","full_time","sic2007_4dig")
data <- combine_years(list(
lfs_clean_global(lfs_read_2010(root,file),keep_vars = vars),
lfs_clean_global(lfs_read_2011(root,file),keep_vars = vars),
lfs_clean_global(lfs_read_2012(root,file),keep_vars = vars),
lfs_clean_global(lfs_read_2013(root,file),keep_vars = vars),
lfs_clean_global(lfs_read_2014(root,file),keep_vars = vars),
lfs_clean_global(lfs_read_2015(root,file),keep_vars = vars),
lfs_clean_global(lfs_read_2016(root,file),keep_vars = vars),
lfs_clean_global(lfs_read_2017(root,file),keep_vars = vars),
lfs_clean_global(lfs_read_2018(root,file),keep_vars = vars),
lfs_clean_global(lfs_read_2019(root,file),keep_vars = vars),
lfs_clean_global(lfs_read_2020(root,file),keep_vars = vars)
)
)
## restrict to all employed/self-employed with complete information on
## full time status and industry
data <- data[lmstatus=="employed"|lmstatus=="self employed" ,]
data <- data[!is.na(full_time) ,]
data <- data[!is.na(sic2007_4dig) ,]
## calculate fte employment by industry and quarter
data[full_time == "full_time",fte_ := 1]
data[full_time == "part_time",fte_ := 0.5]
data[, fte   := sum(pwt*fte_), by = c("time","sic2007_4dig")]
data[, total := sum(pwt ),     by = c("time","sic2007_4dig")]
data <- unique(data[,c("time","year","sic2007_4dig","fte","total")])
## now average employment across quarters within years
data[, fte_   := mean(fte)  , by = c("year","sic2007_4dig")]
data[, total_ := mean(total), by = c("year","sic2007_4dig")]
data <- unique(data[,c("year","sic2007_4dig","fte_","total_")])
setnames(data,
c("sic2007_4dig","fte_","total_"),
c("SIC_code","fte","total"))
data[, SIC_code := as.numeric(as.character(SIC_code))]
########################################################################################
##### Map SIC Employment onto the FAI categories for the alcohol-disaggregated table ###
## read in the SIC - FAI mapping sheet
map <- readxl::read_excel("data-raw/FAI SIC mapping.xlsx",
range = "A1:D612",
col_names = TRUE)
setDT(map)
map[, SIC_code := as.numeric(SIC_code)]
## read in FAI sectors and get output proportions
sectors <- readxl::read_excel("data-raw/2010_UK_Alcohol_consumption_disaggregated_IxI.xlsx",
range = "B5:C111")
setDT(sectors)
setnames(sectors, names(sectors), c("IOC","Sector"))
output <- readxl::read_excel("data-raw/2010_UK_Alcohol_consumption_disaggregated_IxI.xlsx",
range = "D120:DE120",
col_names = FALSE)
output <- as.vector(as.matrix(output))
output <- cbind(sectors,output)
sec1_alc_prop <- as.numeric(output[61,"output"]/(output[60,"output"] + output[61,"output"]))
sec2_alc_prop <- as.numeric(output[69,"output"]/(output[68,"output"] + output[69,"output"]))
sec3_alc_prop <- as.numeric(output[71,"output"]/(output[70,"output"] + output[71,"output"]))
rm(output)
## loop over years
for (y in 2010:2020) {
empl <- data[year == y,]
## map onto the FAI categories
merge <- merge.data.table(map, empl, by = "SIC_code", all.x = TRUE)
merge[is.na(total), total := 0]
merge[is.na(fte), fte := 0]
merge[, tot_emp := sum(total, na.rm=TRUE), by = "IOC"]
merge[, tot_fte := sum(fte, na.rm=TRUE)  , by = "IOC"]
merge <- unique(merge[,c("IOC","Sector","tot_emp","tot_fte")])
### need to create the 3 disaggregated alcohol sectors.
### apportion employment in line with the output ratio between the
### alcohol and non-alcohol sectors
fai_empl <- merge.data.table(sectors, merge, by = c("IOC","Sector"), all.x = TRUE, sort = FALSE)
sec1_alc_emp <- as.numeric(fai_empl[60,"tot_emp"])
sec2_alc_emp <- as.numeric(fai_empl[68,"tot_emp"])
sec3_alc_emp <- as.numeric(fai_empl[70,"tot_emp"])
sec1_alc_fte <- as.numeric(fai_empl[60,"tot_fte"])
sec2_alc_fte <- as.numeric(fai_empl[68,"tot_fte"])
sec3_alc_fte <- as.numeric(fai_empl[70,"tot_fte"])
#### fill in the missing alcohol categories
## Wholesale/Retail
fai_empl[61, tot_emp :=  sec1_alc_emp*sec2_alc_prop]
fai_empl[60, tot_emp :=  sec1_alc_emp*(1-sec1_alc_prop)]
fai_empl[61, tot_fte :=  sec1_alc_fte*sec2_alc_prop]
fai_empl[60, tot_fte :=  sec1_alc_fte*(1-sec1_alc_prop)]
## Food and Beverage
fai_empl[69, tot_emp :=  sec2_alc_emp*sec2_alc_prop]
fai_empl[68, tot_emp :=  sec2_alc_emp*(1-sec2_alc_prop)]
fai_empl[69, tot_fte :=  sec2_alc_fte*sec2_alc_prop]
fai_empl[68, tot_fte :=  sec2_alc_fte*(1-sec2_alc_prop)]
## Food and Beverage
fai_empl[71, tot_emp :=  sec3_alc_emp*sec3_alc_prop]
fai_empl[70, tot_emp :=  sec3_alc_emp*(1-sec3_alc_prop)]
fai_empl[71, tot_fte :=  sec3_alc_fte*sec3_alc_prop]
fai_empl[70, tot_fte :=  sec3_alc_fte*(1-sec3_alc_prop)]
fai_empl[, year := y]
assign(paste("lfs_empl_fai",y,sep="."),fai_empl)
}
lfs_empl_fai <- rbindlist(list(lfs_empl_fai.2010,
lfs_empl_fai.2011,
lfs_empl_fai.2012,
lfs_empl_fai.2013,
lfs_empl_fai.2014,
lfs_empl_fai.2015,
lfs_empl_fai.2016,
lfs_empl_fai.2017,
lfs_empl_fai.2018,
lfs_empl_fai.2019,
lfs_empl_fai.2020))
usethis::use_data(lfs_empl_fai,overwrite = TRUE)
View(lfs_empl_fai)
library(lfsclean)
library(readxl)
library(data.table)
library(magrittr)
### LFS employment data
## construct 4-digit employment by industry-year from the Labour Force Survey
root <- "D:/"
file <- "Datasets/Labour Force Survey/raw data/"
vars <- c("year","quarter","pwt","age","gender","lmstatus","full_time","sic2007_4dig")
data <- combine_years(list(
lfs_clean_global(lfs_read_2010(root,file),keep_vars = vars),
lfs_clean_global(lfs_read_2011(root,file),keep_vars = vars),
lfs_clean_global(lfs_read_2012(root,file),keep_vars = vars),
lfs_clean_global(lfs_read_2013(root,file),keep_vars = vars),
lfs_clean_global(lfs_read_2014(root,file),keep_vars = vars),
lfs_clean_global(lfs_read_2015(root,file),keep_vars = vars),
lfs_clean_global(lfs_read_2016(root,file),keep_vars = vars),
lfs_clean_global(lfs_read_2017(root,file),keep_vars = vars),
lfs_clean_global(lfs_read_2018(root,file),keep_vars = vars),
lfs_clean_global(lfs_read_2019(root,file),keep_vars = vars),
lfs_clean_global(lfs_read_2020(root,file),keep_vars = vars)
)
)
## restrict to all employed/self-employed with complete information on
## full time status and industry
data <- data[lmstatus=="employed"|lmstatus=="self employed" ,]
data <- data[!is.na(full_time) ,]
data <- data[!is.na(sic2007_4dig) ,]
## calculate fte employment by industry and quarter
data[full_time == "full_time",fte_ := 1]
data[full_time == "part_time",fte_ := 0.5]
data[, fte   := sum(pwt*fte_), by = c("time","sic2007_4dig")]
data[, total := sum(pwt ),     by = c("time","sic2007_4dig")]
data <- unique(data[,c("time","year","sic2007_4dig","fte","total")])
## now average employment across quarters within years
data[, fte_   := mean(fte)  , by = c("year","sic2007_4dig")]
data[, total_ := mean(total), by = c("year","sic2007_4dig")]
data <- unique(data[,c("year","sic2007_4dig","fte_","total_")])
setnames(data,
c("sic2007_4dig","fte_","total_"),
c("SIC_code","fte","total"))
data[, SIC_code := as.numeric(as.character(SIC_code))]
#######################################################################
##### Map SIC Employment onto the CPA categories for the ONS tables ###
## read in the SIC - CPA mapping sheet
map <- readxl::read_excel("data-raw/CPA SIC mapping.xlsx",
range = "A1:D613",
col_names = TRUE)
setDT(map)
map[, SIC_code := as.numeric(SIC_code)]
## loop over years - merge in the mapping, assign 0s to 4-digit SIC
## industries not in the LFS (small sectors not captured in the sampling)
## and produce clean tables for SIC and CPA employment by year
for (y in 2010:2020) {
empl <- data[year == y,]
## map onto the CPA categories
merge <- merge.data.table(map, empl, by = "SIC_code", all.x = TRUE)
merge[is.na(total), total := 0]
merge[is.na(fte), fte := 0]
merge_sic <- merge[,c("SIC_code","Industry","total","fte")]
setnames(merge_sic, c("total","fte"), c("tot_emp","tot_fte"))
merge[, tot_emp := sum(total, na.rm=TRUE), by = "CPA_code"]
merge[, tot_fte := sum(fte, na.rm=TRUE)  , by = "CPA_code"]
merge <- unique(merge[,c("CPA_code","Product","tot_emp","tot_fte")])
merge[, year := y]
merge_sic[, year := y]
assign(paste("lfs_empl_sic",y,sep="."),merge_sic)
assign(paste("lfs_empl_cpa",y,sep="."),merge)
}
lfs_empl_cpa <- rbindlist(list(lfs_empl_cpa.2010,
lfs_empl_cpa.2011,
lfs_empl_cpa.2012,
lfs_empl_cpa.2013,
lfs_empl_cpa.2014,
lfs_empl_cpa.2015,
lfs_empl_cpa.2016,
lfs_empl_cpa.2017,
lfs_empl_cpa.2018,
lfs_empl_cpa.2019,
lfs_empl_cpa.2020))
lfs_empl_sic <- rbindlist(list(lfs_empl_sic.2010,
lfs_empl_sic.2011,
lfs_empl_sic.2012,
lfs_empl_sic.2013,
lfs_empl_sic.2014,
lfs_empl_sic.2015,
lfs_empl_sic.2016,
lfs_empl_sic.2017,
lfs_empl_sic.2018,
lfs_empl_sic.2019,
lfs_empl_sic.2020))
usethis::use_data(lfs_empl_cpa,overwrite = TRUE)
library(readxl)
library(data.table)
## read in the SIC - CPA mapping sheet
map <- readxl::read_excel("data-raw/CPA SIC mapping.xlsx",
range = "A1:D613",
col_names = TRUE)
setDT(map)
map[, SIC_code := as.numeric(SIC_code)]
### ASHE earnings data
year <- 2020
earn <- readxl::read_excel(paste0("data-raw/SIC07 Industry (4) SIC2007 Table 16.7a   Annual pay - Gross ",2020,".xls"),
sheet = "All",
range = "A5:F997",
col_names = TRUE)
setDT(earn)
earn <- earn[,c(1:3,6)]
setnames(earn,
names(earn),
c("Industry","SIC_code","njobs","salary"))
earn[, SIC_code := as.numeric(SIC_code)]
### merge to the mapping file to isolate the 4-digit level industries
earn <- merge.data.table(earn,map[,"Industry"],by = "Industry", all.x = FALSE, all.y = TRUE, sort = FALSE)
### some duplicates - if a 3-digit industry has only one 4-digit component, they will have the same name
earn[, max := max(SIC_code), by = "Industry"]
earn <- earn[SIC_code == max,]
### this produces the 612 industries in the mapping file
earn <- earn[,-c("max")]
### set as numeric
earn[, salary := as.numeric(salary)]
earn[, njobs := as.numeric(njobs)]
### need employment to use as weights when mapping earnings to CPA but in ASHE data
### much of the njobs entries are missing, so match in FTE employment from the BRES/LFS data
### for the most recent year of data. Use LFS FTE totals as weights
source("data-raw/data processing - employment data LFS.R")
weights <- lfs_empl_sic[year == max(year),]
merge <- merge.data.table(earn, weights[,c("SIC_code","tot_fte")], by = "SIC_code")
merge_mapping <- merge.data.table(merge, map, by = c("SIC_code","Industry") )
### calculate weighted mean salary by CPA code and collapse data to CPA level
merge_mapping[, avg_salary := weighted.mean(salary,w = tot_fte, na.rm = TRUE), by = "CPA_code"]
merge_mapping <- unique(merge_mapping[,c("CPA_code","Product","avg_salary")])
## 0 fte so produced weight of 0, but this is a 1:1 CPA SIC mapping so take this directly from SIC code 9700
merge_mapping[CPA_code == "CPA_T97", avg_salary := 12659]
## Owner-Occupiers Housing Services. Fill in with SIC "Renting and operating of own or leased real estate"
merge_mapping[CPA_code == "CPA_L68A", avg_salary := 31544]
## Remediation and other waste manaegemnt services. No reliable data even at the parent 2 digit SIC industry. So
## fill in with the mean for the whole of broad group E - Water supply, sewerage, and waste management/remediation.
merge_mapping[CPA_code == "CPA_E39", avg_salary := 37168]
## Mining support services No reliable data even at the parent 2 digit SIC industry. So
## fill in with the mean for the whole of broad group B - Mining and Quarrying.
merge_mapping[CPA_code == "CPA_B09", avg_salary := 55519]
ashe_earn_cpa <- copy(merge_mapping)
## rename some categories
merge_mapping[CPA_code == "CPA_B06 & B07", Product := "Crude Petroleum And Natural Gas & Metal Ores"]
merge_mapping[CPA_code == "CPA_C235_6"   , Product := "Manufacture of cement, lime, plaster and articles of concrete, cement and plaster"]
merge_mapping[CPA_code == "CPA_L68A"     , Product := "Imputed rents of owner-occupied dwellings"]
merge_mapping[CPA_code == "CPA_L68BXL683", Product := "Real estate services, excluding on a fee or contract basis and excluding imputed rent"]
merge_mapping[CPA_code == "CPA_L683"     , Product := "Real estate activities on a fee or contract basis"]
usethis::use_data(ashe_earn_cpa, overwrite = TRUE)
rm(list = ls())
library(readxl)
library(data.table)
## read in the SIC - CPA mapping sheet
map <- readxl::read_excel("data-raw/CPA SIC mapping.xlsx",
range = "A1:D613",
col_names = TRUE)
setDT(map)
map[, SIC_code := as.numeric(SIC_code)]
### ASHE earnings data
year <- 2020
earn <- readxl::read_excel(paste0("data-raw/SIC07 Industry (4) SIC2007 Table 16.7a   Annual pay - Gross ",2020,".xls"),
sheet = "All",
range = "A5:F997",
col_names = TRUE)
setDT(earn)
earn <- earn[,c(1:3,6)]
setnames(earn,
names(earn),
c("Industry","SIC_code","njobs","salary"))
earn[, SIC_code := as.numeric(SIC_code)]
### merge to the mapping file to isolate the 4-digit level industries
earn <- merge.data.table(earn,map[,"Industry"],by = "Industry", all.x = FALSE, all.y = TRUE, sort = FALSE)
### some duplicates - if a 3-digit industry has only one 4-digit component, they will have the same name
earn[, max := max(SIC_code), by = "Industry"]
earn <- earn[SIC_code == max,]
### this produces the 612 industries in the mapping file
earn <- earn[,-c("max")]
### set as numeric
earn[, salary := as.numeric(salary)]
earn[, njobs := as.numeric(njobs)]
### need employment to use as weights when mapping earnings to CPA but in ASHE data
### much of the njobs entries are missing, so match in FTE employment from the BRES/LFS data
### for the most recent year of data. Use LFS FTE totals as weights
source("data-raw/data processing - employment data LFS.R")
weights <- lfs_empl_sic[year == max(year),]
merge <- merge.data.table(earn, weights[,c("SIC_code","tot_fte")], by = "SIC_code")
merge_mapping <- merge.data.table(merge, map, by = c("SIC_code","Industry") )
### calculate weighted mean salary by CPA code and collapse data to CPA level
merge_mapping[, avg_salary := weighted.mean(salary,w = tot_fte, na.rm = TRUE), by = "CPA_code"]
merge_mapping <- unique(merge_mapping[,c("CPA_code","Product","avg_salary")])
####### -------- end generic code. from here, year-specific treatment of NA salary information ------- ######
### Where 4-digit SIC salary information is not available this is due to ONS suppressing unreliable information.
### If so, use the most detailed parent SIC category (i.e. 3 digit) possible as a proxy.
# For 2020, only an issue for 3 sectors
## 0 fte so produced weight of 0, but this is a 1:1 CPA SIC mapping so take this directly from SIC code 9700
merge_mapping[CPA_code == "CPA_T97", avg_salary := 12659]
## Owner-Occupiers Housing Services. Fill in with SIC "Renting and operating of own or leased real estate"
merge_mapping[CPA_code == "CPA_L68A", avg_salary := 31544]
## Remediation and other waste manaegemnt services. No reliable data even at the parent 2 digit SIC industry. So
## fill in with the mean for the whole of broad group E - Water supply, sewerage, and waste management/remediation.
merge_mapping[CPA_code == "CPA_E39", avg_salary := 37168]
## Mining support services No reliable data even at the parent 2 digit SIC industry. So
## fill in with the mean for the whole of broad group B - Mining and Quarrying.
merge_mapping[CPA_code == "CPA_B09", avg_salary := 55519]
ashe_earn_cpa <- copy(merge_mapping)
## rename some categories
merge_mapping[CPA_code == "CPA_B06 & B07", Product := "Crude Petroleum And Natural Gas & Metal Ores"]
merge_mapping[CPA_code == "CPA_C235_6"   , Product := "Manufacture of cement, lime, plaster and articles of concrete, cement and plaster"]
merge_mapping[CPA_code == "CPA_L68A"     , Product := "Imputed rents of owner-occupied dwellings"]
merge_mapping[CPA_code == "CPA_L68BXL683", Product := "Real estate services, excluding on a fee or contract basis and excluding imputed rent"]
merge_mapping[CPA_code == "CPA_L683"     , Product := "Real estate activities on a fee or contract basis"]
usethis::use_data(ashe_earn_cpa, overwrite = TRUE)
rm(list = ls())
library(tobalciomodel)
library(tobalciomodel)
roxygen2::roxygenise()
data <- tobalciomodel::vectors_hhold
View(data)
35-12
all_clothing     <- c(rep(0,5),1,rep(0,30))
all_furniture    <- c(rep(0,12),1,rep(0,23))
all_appliances   <- c(rep(0,14),1,rep(0,21))
all_vehicles     <- c(rep(0,21),1,rep(0,14))
all_books        <- c(rep(0,31),1,rep(0,4))
all_holidays     <- c(rep(0,32),1,rep(0,3))
library(readxl)
library(data.table)
change_exp <- -20
savings_rate <- 0
#####################################################
###### Household final consumption expenditure ######
## distribution of spending across the 36 products
# (i) an overall distribution
# (ii) exclude alcohol
# (iii) exclude tobacco
# (iv) exclude both
year <- 2018
totals <- read_excel("data-raw/supply and use 1997-2018.xlsx",
sheet = paste0("Table 3 - HHFCe ",year),
range = "A108:AM108",
col_names = FALSE)
hhfce <- read_excel("data-raw/supply and use 1997-2018.xlsx",
sheet = paste0("Table 3 - HHFCe ",year),
range = "A4:AL107",
col_names = TRUE)
#setDT(hhfce)
#### (1) Calculate amount of expenditure to reallocate
#reallocation <- -1*(1 - savings_rate)*change_exp
#### (2a) Calculate the distribution of consumption across the 36 COICOP products
prop_all      <- totals
prop_noalc    <- totals
prop_notob    <- totals
prop_noalctob <- totals
for (i in 3:39) {
prop_all[,i]      <- totals[,i]/(totals[,39])
prop_noalc[,i]    <- totals[,i]/(totals[,39] - totals[,5])
prop_notob[,i]    <- totals[,i]/(totals[,39] - totals[,6])
prop_noalctob[,i] <- totals[,i]/(totals[,39] - totals[,5] - totals[,6])
}
prop_noalc[,5] <- 0
prop_notob[,6] <- 0
prop_noalctob[,5] <- 0
prop_noalctob[,6] <- 0
hhfce_all      <- as.vector(as.matrix(prop_all[,-c(1,2,39)]))
hhfce_noalc    <- as.vector(as.matrix(prop_noalc[,-c(1,2,39)]))
hhfce_notob    <- as.vector(as.matrix(prop_notob[,-c(1,2,39)]))
hhfce_noalctob <- as.vector(as.matrix(prop_noalctob[,-c(1,2,39)]))
#### vectors which allocate to one particular product
## hotels/restaurants
all_hotels       <- c(rep(0,34),1,0)
all_rec_durables <- c(rep(0,28),1,rep(0,7))
all_rec_services <- c(rep(0,30),1,rep(0,5))
all_clothing     <- c(rep(0,5),1,rep(0,30))
all_furniture    <- c(rep(0,12),1,rep(0,23))
all_appliances   <- c(rep(0,14),1,rep(0,21))
all_vehicles     <- c(rep(0,21),1,rep(0,14))
all_books        <- c(rep(0,31),1,rep(0,4))
#### combine vectors into one data table
coicop <- names(hhfce[,-c(1:2)])
proportions <- data.table(coicop,
hhfce_all,
hhfce_noalc,
hhfce_notob,
hhfce_noalctob,
all_hotels, all_rec_durables, all_rec_services,
all_clothing, all_furniture, all_appliances, all_vehicles, all_books)
setDT(proportions)
vectors_hhold <- copy(proportions)
usethis::use_data(vectors_hhold, overwrite = TRUE)
roxygen2::roxygenise()
help(package = shinyWidgets)
