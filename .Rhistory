employment,
employment/total.output,
gva.total/total.output,
gva.taxes/total.output,
gva.gos/total.output,
gva.wages/total.output),
nrow = 105,
byrow = FALSE,
dimnames = list(NULL,
c("Product","output","employment","empl_coef","gva_coef","tax_coef","gos_coef","comp_coef")))
path = "C:/Users/cm1djm/Documents/GitLab Projects/SPECTRUM/Projects/input output modelling/inputs"
y <- copy(year)
### Read Supply Table (used to convert basic prices to purchaser prices) ######
supply <- readxl::read_excel(paste0(path,"/supply and use 1997-2018.xlsx"),
sheet = paste0("Table 1 - Supply ",y),
range = "A3:K108",
col_names = TRUE)
setDT(supply)
supply <- supply[,-c(4:7)]
setnames(supply,
names(supply),
c("code","Product","output_bp","imports","margins","taxes","output_pp"))
supply[, tax_prop := round(taxes/output_pp,3)]
supply[, scale_bp_to_pp := output_pp/output_bp]
supply[, scale_pp_to_bp := output_bp/output_pp]
### Read the Use table - product by product
iotable <- read_excel(paste0(path,"/supply and use 1997-2018.xlsx"),
sheet = paste0("Table 2 - Int Con ",y),
range = "C5:DC110")
iotable <- as.matrix(iotable)
### GVA figures and employment by sector, create a table of technical coefficients
### (input as proportion of total output)
gva.total <- as.vector(as.matrix(read_excel(paste0(path,"/supply and use 1997-2018.xlsx"),
sheet = paste0("Table 2 - Int Con ",y),
range = "C115:DC115",
col_names = FALSE)))
gva.taxes <- as.vector(as.matrix(read_excel(paste0(path,"/supply and use 1997-2018.xlsx"),
sheet = paste0("Table 2 - Int Con ",y),
range = "C112:DC112",
col_names = FALSE)))
gva.gos   <- as.vector(as.matrix(read_excel(paste0(path,"/supply and use 1997-2018.xlsx"),
sheet = paste0("Table 2 - Int Con ",y),
range = "C114:DC114",
col_names = FALSE)))
gva.wages <- as.vector(as.matrix(read_excel(paste0(path,"/supply and use 1997-2018.xlsx"),
sheet = paste0("Table 2 - Int Con ",y),
range = "C113:DC113",
col_names = FALSE)))
total.output <- as.vector(as.matrix(read_excel(paste0(path,"/supply and use 1997-2018.xlsx"),
sheet = paste0("Table 2 - Int Con ",y),
range = "C116:DC116",
col_names = FALSE) ))
if (fte == TRUE) {
employment <- tobalciomodel::lfs_empl_cpa[year == y, "tot_fte"]
} else {
employment <- tobalciomodel::lfs_empl_cpa[year == y, "tot_emp"]
}
gva <- matrix(c(supply$Product,
total.output,
employment,
employment/total.output,
gva.total/total.output,
gva.taxes/total.output,
gva.gos/total.output,
gva.wages/total.output),
nrow = 105,
byrow = FALSE,
dimnames = list(NULL,
c("Product","output","employment","empl_coef","gva_coef","tax_coef","gos_coef","comp_coef")))
employment <- as.vector(as.matrix(employment))
gva <- matrix(c(supply$Product,
total.output,
employment,
employment/total.output,
gva.total/total.output,
gva.taxes/total.output,
gva.gos/total.output,
gva.wages/total.output),
nrow = 105,
byrow = FALSE,
dimnames = list(NULL,
c("Product","output","employment","empl_coef","gva_coef","tax_coef","gos_coef","comp_coef")))
View(gva)
devtools::document()
library(tobalciomodel)
devtools::document()
library(tobalciomodel)
library(readxl)
library(data.table)
## read in the SIC - CPA mapping sheet
map <- readxl::read_excel("raw-data/CPA SIC mapping.xlsx",
range = "A1:D613",
col_names = TRUE)
setDT(map)
map[, SIC_code := as.numeric(SIC_code)]
### ASHE earnings data
year <- 2020
earn <- readxl::read_excel(paste0("raw-data/SIC07 Industry (4) SIC2007 Table 16.7a   Annual pay - Gross ",2020,".xls"),
sheet = "All",
range = "A5:F997",
col_names = TRUE)
setDT(earn)
earn <- earn[,c(1:3,6)]
setnames(earn,
names(earn),
c("Industry","SIC_code","njobs","salary"))
earn[, SIC_code := as.numeric(SIC_code)]
### merge to the mapping file to isolate the 4-digit level industries
earn <- merge.data.table(earn,map[,"Industry"],by = "Industry", all.x = FALSE, all.y = TRUE, sort = FALSE)
### some duplicates - if a 3-digit industry has only one 4-digit component, they will have the same name
earn[, max := max(SIC_code), by = "Industry"]
earn <- earn[SIC_code == max,]
### this produces the 612 industries in the mapping file
earn <- earn[,-c("max")]
### set as numeric
earn[, salary := as.numeric(salary)]
earn[, njobs := as.numeric(njobs)]
### need employment to use as weights when mapping earnings to CPA but in ASHE data
### much of the njobs entries are missing, so match in FTE employment from the BRES/LFS data
### for the most recent year of data. Use LFS FTE totals as weights
weights <- empl_by_sic[year == max(year),]
merge <- merge.data.table(earn, weights[,c("SIC_code","tot_fte_lfs")], by = "SIC_code")
merge_mapping <- merge.data.table(merge, map, by = c("SIC_code","Industry") )
### calculate weighted mean salary by CPA code and collapse data to CPA level
merge_mapping[, avg_salary := weighted.mean(salary,w = tot_fte_lfs, na.rm = TRUE), by = "CPA_code"]
merge_mapping <- unique(merge_mapping[,c("CPA_code","Product","avg_salary")])
####### -------- end generic code. from here, year-specific treatment of NA salary information ------- ######
### Where 4-digit SIC salary information is not available this is due to ONS suppressing unreliable information.
### If so, use the most detailed parent SIC category (i.e. 3 digit) possible as a proxy.
# For 2020, only an issue for 3 sectors
## 0 fte so produced weight of 0, but this is a 1:1 CPA SIC mapping so take this directly from SIC code 9700
merge_mapping[CPA_code == "CPA_T97", avg_salary := 12659]
## Owner-Occupiers Housing Services. Fill in with SIC "Renting and operating of own or leased real estate"
merge_mapping[CPA_code == "CPA_L68A", avg_salary := 31544]
## Remediation and other waste manaegemnt services. No reliable data even at the parent 2 digit SIC industry. So
## fill in with the mean for the whole of broad group E - Water supply, sewerage, and waste management/remediation.
merge_mapping[CPA_code == "CPA_E39", avg_salary := 37168]
## Mining support services No reliable data even at the parent 2 digit SIC industry. So
## fill in with the mean for the whole of broad group B - Mining and Quarrying.
merge_mapping[CPA_code == "CPA_B09", avg_salary := 55519]
ashe_earn_cpa <- copy(merge_mapping)
library(readxl)
library(data.table)
## read in the SIC - CPA mapping sheet
map <- readxl::read_excel("raw-data/CPA SIC mapping.xlsx",
range = "A1:D613",
col_names = TRUE)
setDT(map)
map[, SIC_code := as.numeric(SIC_code)]
library(readxl)
library(data.table)
## read in the SIC - CPA mapping sheet
map <- readxl::read_excel("data-raw/CPA SIC mapping.xlsx",
range = "A1:D613",
col_names = TRUE)
setDT(map)
map[, SIC_code := as.numeric(SIC_code)]
### ASHE earnings data
year <- 2020
earn <- readxl::read_excel(paste0("data-raw/SIC07 Industry (4) SIC2007 Table 16.7a   Annual pay - Gross ",2020,".xls"),
sheet = "All",
range = "A5:F997",
col_names = TRUE)
setDT(earn)
earn <- earn[,c(1:3,6)]
setnames(earn,
names(earn),
c("Industry","SIC_code","njobs","salary"))
earn[, SIC_code := as.numeric(SIC_code)]
### merge to the mapping file to isolate the 4-digit level industries
earn <- merge.data.table(earn,map[,"Industry"],by = "Industry", all.x = FALSE, all.y = TRUE, sort = FALSE)
### some duplicates - if a 3-digit industry has only one 4-digit component, they will have the same name
earn[, max := max(SIC_code), by = "Industry"]
earn <- earn[SIC_code == max,]
### this produces the 612 industries in the mapping file
earn <- earn[,-c("max")]
### set as numeric
earn[, salary := as.numeric(salary)]
earn[, njobs := as.numeric(njobs)]
### need employment to use as weights when mapping earnings to CPA but in ASHE data
### much of the njobs entries are missing, so match in FTE employment from the BRES/LFS data
### for the most recent year of data. Use LFS FTE totals as weights
weights <- empl_by_sic[year == max(year),]
merge <- merge.data.table(earn, weights[,c("SIC_code","tot_fte_lfs")], by = "SIC_code")
merge_mapping <- merge.data.table(merge, map, by = c("SIC_code","Industry") )
### calculate weighted mean salary by CPA code and collapse data to CPA level
merge_mapping[, avg_salary := weighted.mean(salary,w = tot_fte_lfs, na.rm = TRUE), by = "CPA_code"]
merge_mapping <- unique(merge_mapping[,c("CPA_code","Product","avg_salary")])
####### -------- end generic code. from here, year-specific treatment of NA salary information ------- ######
### Where 4-digit SIC salary information is not available this is due to ONS suppressing unreliable information.
### If so, use the most detailed parent SIC category (i.e. 3 digit) possible as a proxy.
# For 2020, only an issue for 3 sectors
## 0 fte so produced weight of 0, but this is a 1:1 CPA SIC mapping so take this directly from SIC code 9700
merge_mapping[CPA_code == "CPA_T97", avg_salary := 12659]
## Owner-Occupiers Housing Services. Fill in with SIC "Renting and operating of own or leased real estate"
merge_mapping[CPA_code == "CPA_L68A", avg_salary := 31544]
## Remediation and other waste manaegemnt services. No reliable data even at the parent 2 digit SIC industry. So
## fill in with the mean for the whole of broad group E - Water supply, sewerage, and waste management/remediation.
merge_mapping[CPA_code == "CPA_E39", avg_salary := 37168]
## Mining support services No reliable data even at the parent 2 digit SIC industry. So
## fill in with the mean for the whole of broad group B - Mining and Quarrying.
merge_mapping[CPA_code == "CPA_B09", avg_salary := 55519]
ashe_earn_cpa <- copy(merge_mapping)
usethis::use_data(ashe_earn_cpa,overwrite = TRUE)
library(readxl)
library(data.table)
## read in the SIC - CPA mapping sheet
map <- readxl::read_excel("data-raw/CPA SIC mapping.xlsx",
range = "A1:D613",
col_names = TRUE)
setDT(map)
map[, SIC_code := as.numeric(SIC_code)]
### ASHE earnings data
year <- 2020
earn <- readxl::read_excel(paste0("data-raw/SIC07 Industry (4) SIC2007 Table 16.7a   Annual pay - Gross ",2020,".xls"),
sheet = "All",
range = "A5:F997",
col_names = TRUE)
setDT(earn)
earn <- earn[,c(1:3,6)]
setnames(earn,
names(earn),
c("Industry","SIC_code","njobs","salary"))
earn[, SIC_code := as.numeric(SIC_code)]
earn <- merge.data.table(earn,map[,"Industry"],by = "Industry", all.x = FALSE, all.y = TRUE, sort = FALSE)
earn[, max := max(SIC_code), by = "Industry"]
earn <- earn[SIC_code == max,]
earn <- earn[,-c("max")]
earn[, salary := as.numeric(salary)]
earn[, njobs := as.numeric(njobs)]
source("data-raw/data processing - employment data LFS.R")
weights <- empl_by_sic[year == max(year),]
merge <- merge.data.table(earn, weights[,c("SIC_code","tot_fte_lfs")], by = "SIC_code")
weights <- lfs_empl_sic[year == max(year),]
View(weights)
weights <- lfs_empl_sic[year == max(year),]
merge <- merge.data.table(earn, weights[,c("SIC_code","tot_fte")], by = "SIC_code")
merge_mapping <- merge.data.table(merge, map, by = c("SIC_code","Industry") )
### calculate weighted mean salary by CPA code and collapse data to CPA level
merge_mapping[, avg_salary := weighted.mean(salary,w = tot_fte_lfs, na.rm = TRUE), by = "CPA_code"]
merge_mapping <- unique(merge_mapping[,c("CPA_code","Product","avg_salary")])
####### -------- end generic code. from here, year-specific treatment of NA salary information ------- ######
### Where 4-digit SIC salary information is not available this is due to ONS suppressing unreliable information.
### If so, use the most detailed parent SIC category (i.e. 3 digit) possible as a proxy.
# For 2020, only an issue for 3 sectors
## 0 fte so produced weight of 0, but this is a 1:1 CPA SIC mapping so take this directly from SIC code 9700
merge_mapping[CPA_code == "CPA_T97", avg_salary := 12659]
## Owner-Occupiers Housing Services. Fill in with SIC "Renting and operating of own or leased real estate"
merge_mapping[CPA_code == "CPA_L68A", avg_salary := 31544]
## Remediation and other waste manaegemnt services. No reliable data even at the parent 2 digit SIC industry. So
## fill in with the mean for the whole of broad group E - Water supply, sewerage, and waste management/remediation.
merge_mapping[CPA_code == "CPA_E39", avg_salary := 37168]
## Mining support services No reliable data even at the parent 2 digit SIC industry. So
## fill in with the mean for the whole of broad group B - Mining and Quarrying.
merge_mapping[CPA_code == "CPA_B09", avg_salary := 55519]
ashe_earn_cpa <- copy(merge_mapping)
View(ashe_earn_cpa)
weights <- lfs_empl_sic[year == max(year),]
merge <- merge.data.table(earn, weights[,c("SIC_code","tot_fte")], by = "SIC_code")
View(merge)
merge_mapping <- merge.data.table(merge, map, by = c("SIC_code","Industry") )
View(merge_mapping)
merge_mapping[, avg_salary := weighted.mean(salary,w = tot_fte_lfs, na.rm = TRUE), by = "CPA_code"]
merge_mapping <- unique(merge_mapping[,c("CPA_code","Product","avg_salary")])
View(merge_mapping)
View(merge_mapping)
merge_mapping[, avg_salary := weighted.mean(salary,w = tot_fte, na.rm = TRUE), by = "CPA_code"]
merge_mapping <- unique(merge_mapping[,c("CPA_code","Product","avg_salary")])
View(merge_mapping)
####### -------- end generic code. from here, year-specific treatment of NA salary information ------- ######
### Where 4-digit SIC salary information is not available this is due to ONS suppressing unreliable information.
### If so, use the most detailed parent SIC category (i.e. 3 digit) possible as a proxy.
# For 2020, only an issue for 3 sectors
## 0 fte so produced weight of 0, but this is a 1:1 CPA SIC mapping so take this directly from SIC code 9700
merge_mapping[CPA_code == "CPA_T97", avg_salary := 12659]
## Owner-Occupiers Housing Services. Fill in with SIC "Renting and operating of own or leased real estate"
merge_mapping[CPA_code == "CPA_L68A", avg_salary := 31544]
## Remediation and other waste manaegemnt services. No reliable data even at the parent 2 digit SIC industry. So
## fill in with the mean for the whole of broad group E - Water supply, sewerage, and waste management/remediation.
merge_mapping[CPA_code == "CPA_E39", avg_salary := 37168]
## Mining support services No reliable data even at the parent 2 digit SIC industry. So
## fill in with the mean for the whole of broad group B - Mining and Quarrying.
merge_mapping[CPA_code == "CPA_B09", avg_salary := 55519]
ashe_earn_cpa <- copy(merge_mapping)
View(ashe_earn_cpa)
usethis::use_data(ashe_earn_cpa,overwrite = TRUE)
rm(list = ls())
devtools::document()
library(tobalciomodel)
help(package = tobalciomodel)
devtools::document()
library(tobalciomodel)
help(package = tobalciomodel)
devtools::document()
library(tobalciomodel)
?read_excel
L1 <- solve(diag(length(total.output)) - A)
devtools::document()
library(tobalciomodel)
library(lfsclean)
library(readxl)
library(data.table)
library(magrittr)
### LFS employment data
## construct 4-digit employment by industry-year from the Labour Force Survey
root <- "C:/"
file <- "Users/cm1djm/Documents/Datasets/Labour Force Survey/raw data/"
vars <- c("year","quarter","pwt","age","gender","lmstatus","full_time","sic2007_4dig")
data <- combine_years(list(
lfs_clean_global(lfs_read_2010(root,file),keep_vars = vars),
lfs_clean_global(lfs_read_2011(root,file),keep_vars = vars),
lfs_clean_global(lfs_read_2012(root,file),keep_vars = vars),
lfs_clean_global(lfs_read_2013(root,file),keep_vars = vars),
lfs_clean_global(lfs_read_2014(root,file),keep_vars = vars),
lfs_clean_global(lfs_read_2015(root,file),keep_vars = vars),
lfs_clean_global(lfs_read_2016(root,file),keep_vars = vars),
lfs_clean_global(lfs_read_2017(root,file),keep_vars = vars),
lfs_clean_global(lfs_read_2018(root,file),keep_vars = vars),
lfs_clean_global(lfs_read_2019(root,file),keep_vars = vars),
lfs_clean_global(lfs_read_2020(root,file),keep_vars = vars)
)
)
## restrict to all employed/self-employed with complete information on
## full time status and industry
data <- data[lmstatus=="employed"|lmstatus=="self employed" ,]
data <- data[!is.na(full_time) ,]
data <- data[!is.na(sic2007_4dig) ,]
## calculate fte employment by industry and quarter
data[full_time == "full_time",fte_ := 1]
data[full_time == "part_time",fte_ := 0.5]
data[, fte   := sum(pwt*fte_), by = c("time","sic2007_4dig")]
data[, total := sum(pwt ),     by = c("time","sic2007_4dig")]
data <- unique(data[,c("time","year","sic2007_4dig","fte","total")])
## now average employment across quarters within years
data[, fte_   := mean(fte)  , by = c("year","sic2007_4dig")]
data[, total_ := mean(total), by = c("year","sic2007_4dig")]
data <- unique(data[,c("year","sic2007_4dig","fte_","total_")])
setnames(data,
c("sic2007_4dig","fte_","total_"),
c("SIC_code","fte","total"))
data[, SIC_code := as.numeric(as.character(SIC_code))]
map <- readxl::read_excel("data-raw/FAI SIC mapping.xlsx",
range = "A1:D612",
col_names = TRUE)
setDT(map)
map[, SIC_code := as.numeric(SIC_code)]
y <- 2010
empl <- data[year == y,]
merge <- merge.data.table(map, empl, by = "SIC_code", all.x = TRUE)
merge[is.na(total), total := 0]
merge[is.na(fte), fte := 0]
names(merge)
merge[, tot_emp := sum(total, na.rm=TRUE), by = "IOC"]
merge[, tot_fte := sum(fte, na.rm=TRUE)  , by = "IOC"]
merge <- unique(merge[,c("IOC","Product","tot_emp","tot_fte")])
View(merge)
u <- unique(map[,"IOC"])
View(u)
map <- readxl::read_excel("data-raw/FAI SIC mapping.xlsx",
range = "A1:D612",
col_names = TRUE)
setDT(map)
map[, SIC_code := as.numeric(SIC_code)]
u <- unique(map[,"IOC"])
View(u)
map <- readxl::read_excel("data-raw/FAI SIC mapping.xlsx",
range = "A1:D612",
col_names = TRUE)
setDT(map)
map[, SIC_code := as.numeric(SIC_code)]
u <- unique(map[,"IOC"])
empl <- data[year == y,]
## map onto the FAI categories
merge <- merge.data.table(map, empl, by = "SIC_code", all.x = TRUE)
merge[is.na(total), total := 0]
merge[is.na(fte), fte := 0]
merge[, tot_emp := sum(total, na.rm=TRUE), by = "IOC"]
merge[, tot_fte := sum(fte, na.rm=TRUE)  , by = "IOC"]
merge <- unique(merge[,c("IOC","Product","tot_emp","tot_fte")])
merge[, year := y]
View(merge)
merge <- merge.data.table(map, empl, by = "SIC_code", all.x = TRUE)
merge[is.na(total), total := 0]
merge[is.na(fte), fte := 0]
merge[, tot_emp := sum(total, na.rm=TRUE), by = "IOC"]
merge[, tot_fte := sum(fte, na.rm=TRUE)  , by = "IOC"]
merge <- unique(merge[,c("IOC","Product","tot_emp","tot_fte")])
#######################################################
### need to create the 3 disaggregated alcohol sectors.
###
### apportion employment in line with the output ratio between the
### alcohol and non-alcohol sectors
sectors <- readxl::read_excel("data-raw/2010_UK_Alcohol_consumption_disaggregated_IxI.xlsx",
range = "B5:C111")
setDT(sectors)
setnames(sectors, names(sectors), c("IOC","Product"))
output <- readxl::read_excel("data-raw/2010_UK_Alcohol_consumption_disaggregated_IxI.xlsx",
range = "D120:DE120",
col_names = FALSE)
output <- as.vector(output)
output <- as.vector(as.matrix(output))
output <- cbind(sectors,output)
View(output)
sec1_prop <- output[Product == "Wholesale Trade, and Motor Vehicles And Motorcycles (non-Alcohol)","output"]
View(sec1_prop)
sec1_prop <- output[60,"output"]
View(sec1_prop)
sec1_alc_prop <- as.numeric(output[61,"output"]/(output[60,"output"] + output[61,"output"]))
sec2_alc_prop <- as.numeric(output[69,"output"]/(output[68,"output"] + output[69,"output"]))
sec3_alc_prop <- as.numeric(output[71,"output"]/(output[70,"output"] + output[71,"output"]))
rm(output)
fai_empl <- merge.data.table(sectors, merge, by = c("IOC","Product"), all.x = TRUE, sort = FALSE)
View(fai_empl)
sec1_alc_emp <- as.numeric(fai_empl[60,"tot_emp"])
sec2_alc_emp <- as.numeric(fai_empl[68,"tot_emp"])
sec3_alc_emp <- as.numeric(fai_empl[70,"tot_emp"])
sec1_alc_fte <- as.numeric(fai_empl[60,"tot_fte"])
sec2_alc_fte <- as.numeric(fai_empl[68,"tot_fte"])
sec3_alc_fte <- as.numeric(fai_empl[70,"tot_fte"])
## Wholesale/Retail
fai_empl[61, tot_emp :=  sec1_alc_emp*sec2_alc_prop]
fai_empl[60, tot_emp :=  sec1_alc_emp*(1-sec1_alc_prop)]
fai_empl[61, tot_fte :=  sec1_alc_fte*sec2_alc_prop]
fai_empl[60, tot_fte :=  sec1_alc_fte*(1-sec1_alc_prop)]
## Food and Beverage
fai_empl[69, tot_emp :=  sec2_alc_emp*sec2_alc_prop]
fai_empl[68, tot_emp :=  sec2_alc_emp*(1-sec2_alc_prop)]
fai_empl[69, tot_fte :=  sec2_alc_fte*sec2_alc_prop]
fai_empl[68, tot_fte :=  sec2_alc_fte*(1-sec2_alc_prop)]
## Food and Beverage
fai_empl[71, tot_emp :=  sec3_alc_emp*sec3_alc_prop]
fai_empl[70, tot_emp :=  sec3_alc_emp*(1-sec3_alc_prop)]
fai_empl[71, tot_fte :=  sec3_alc_fte*sec3_alc_prop]
fai_empl[70, tot_fte :=  sec3_alc_fte*(1-sec3_alc_prop)]
View(fai_empl)
fai_empl[, year := y]
assign(paste("lfs_empl_fai",y,sep="."),fai_empl)
########################################################################################
##### Map SIC Employment onto the FAI categories for the alcohol-disaggregated table ###
## read in the SIC - FAI mapping sheet
map <- readxl::read_excel("data-raw/FAI SIC mapping.xlsx",
range = "A1:D612",
col_names = TRUE)
setDT(map)
map[, SIC_code := as.numeric(SIC_code)]
## read in FAI sectors and get output proportions
sectors <- readxl::read_excel("data-raw/2010_UK_Alcohol_consumption_disaggregated_IxI.xlsx",
range = "B5:C111")
setDT(sectors)
setnames(sectors, names(sectors), c("IOC","Product"))
output <- readxl::read_excel("data-raw/2010_UK_Alcohol_consumption_disaggregated_IxI.xlsx",
range = "D120:DE120",
col_names = FALSE)
output <- as.vector(as.matrix(output))
output <- cbind(sectors,output)
sec1_alc_prop <- as.numeric(output[61,"output"]/(output[60,"output"] + output[61,"output"]))
sec2_alc_prop <- as.numeric(output[69,"output"]/(output[68,"output"] + output[69,"output"]))
sec3_alc_prop <- as.numeric(output[71,"output"]/(output[70,"output"] + output[71,"output"]))
rm(output)
## loop over years
for (y in 2010:2020) {
empl <- data[year == y,]
## map onto the FAI categories
merge <- merge.data.table(map, empl, by = "SIC_code", all.x = TRUE)
merge[is.na(total), total := 0]
merge[is.na(fte), fte := 0]
merge[, tot_emp := sum(total, na.rm=TRUE), by = "IOC"]
merge[, tot_fte := sum(fte, na.rm=TRUE)  , by = "IOC"]
merge <- unique(merge[,c("IOC","Product","tot_emp","tot_fte")])
### need to create the 3 disaggregated alcohol sectors.
### apportion employment in line with the output ratio between the
### alcohol and non-alcohol sectors
fai_empl <- merge.data.table(sectors, merge, by = c("IOC","Product"), all.x = TRUE, sort = FALSE)
sec1_alc_emp <- as.numeric(fai_empl[60,"tot_emp"])
sec2_alc_emp <- as.numeric(fai_empl[68,"tot_emp"])
sec3_alc_emp <- as.numeric(fai_empl[70,"tot_emp"])
sec1_alc_fte <- as.numeric(fai_empl[60,"tot_fte"])
sec2_alc_fte <- as.numeric(fai_empl[68,"tot_fte"])
sec3_alc_fte <- as.numeric(fai_empl[70,"tot_fte"])
#### fill in the missing alcohol categories
## Wholesale/Retail
fai_empl[61, tot_emp :=  sec1_alc_emp*sec2_alc_prop]
fai_empl[60, tot_emp :=  sec1_alc_emp*(1-sec1_alc_prop)]
fai_empl[61, tot_fte :=  sec1_alc_fte*sec2_alc_prop]
fai_empl[60, tot_fte :=  sec1_alc_fte*(1-sec1_alc_prop)]
## Food and Beverage
fai_empl[69, tot_emp :=  sec2_alc_emp*sec2_alc_prop]
fai_empl[68, tot_emp :=  sec2_alc_emp*(1-sec2_alc_prop)]
fai_empl[69, tot_fte :=  sec2_alc_fte*sec2_alc_prop]
fai_empl[68, tot_fte :=  sec2_alc_fte*(1-sec2_alc_prop)]
## Food and Beverage
fai_empl[71, tot_emp :=  sec3_alc_emp*sec3_alc_prop]
fai_empl[70, tot_emp :=  sec3_alc_emp*(1-sec3_alc_prop)]
fai_empl[71, tot_fte :=  sec3_alc_fte*sec3_alc_prop]
fai_empl[70, tot_fte :=  sec3_alc_fte*(1-sec3_alc_prop)]
fai_empl[, year := y]
assign(paste("lfs_empl_fai",y,sep="."),fai_empl)
}
lfs_empl_fai <- rbindlist(list(lfs_empl_fai.2010,
lfs_empl_fai.2011,
lfs_empl_fai.2012,
lfs_empl_fai.2013,
lfs_empl_fai.2014,
lfs_empl_fai.2015,
lfs_empl_fai.2016,
lfs_empl_fai.2017,
lfs_empl_fai.2018,
lfs_empl_fai.2019,
lfs_empl_fai.2020))
usethis::use_data(lfs_empl_fai,overwrite = TRUE)
rm(map)
devtools::document()
